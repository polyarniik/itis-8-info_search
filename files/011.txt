<!DOCTYPE html>

<html data-vue-meta="%7B%22lang%22:%7B%22ssr%22:%22ru%22%7D%7D" lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0" name="viewport"/>
<meta content="unsafe-url" name="referrer"/>
<title>Неявные параметры. Когда их следует использовать? Часть 1 / Хабр</title>







<meta content="2.113.0" name="habr-version"/>
<meta content="444736788986613" data-vue-meta="ssr" property="fb:app_id"/><meta content="472597926099084" data-vue-meta="ssr" property="fb:pages"/><meta content="summary_large_image" data-vue-meta="ssr" name="twitter:card"/><meta content="@habr_com" data-vue-meta="ssr" name="twitter:site"/><meta content="Хабр" data-vmid="og:site_name" data-vue-meta="ssr" property="og:site_name"/><meta content="Неявные параметры. Когда их следует использовать? Часть 1" data-vmid="og:title" data-vue-meta="ssr" property="og:title"/><meta content="Неявные параметры. Когда их следует использовать? Часть 1" data-vmid="twitter:title" data-vue-meta="ssr" name="twitter:title"/><meta content="Неявные параметры. Когда их следует использовать? Часть 1" data-vmid="aiturec:title" data-vue-meta="ssr" name="aiturec:title"/><meta content="Имплиситы (implicits) – одна из наиболее вызывающих опасения фич языка программирования Scala, и на то есть веские причины! Во-первых, понятие имплиcитов довольно специфично для Scala. Ни один другой..." data-vmid="description" data-vue-meta="ssr" name="description"/><meta content="Имплиситы (implicits) – одна из наиболее вызывающих опасения фич языка программирования Scala, и на то есть веские причины! Во-первых, понятие имплиcитов довольно специфично для Scala. Ни один другой..." data-vmid="description:itemprop" data-vue-meta="ssr" itemprop="description"/><meta content="Имплиситы (implicits) – одна из наиболее вызывающих опасения фич языка программирования Scala, и на то есть веские причины! Во-первых, понятие имплиcитов довольно специфично для Scala. Ни один другой..." data-vmid="og:description" data-vue-meta="ssr" property="og:description"/><meta content="Имплиситы (implicits) – одна из наиболее вызывающих опасения фич языка программирования Scala, и на то есть веские причины! Во-первых, понятие имплиcитов довольно специфично для Scala. Ни один другой..." data-vmid="twitter:description" data-vue-meta="ssr" name="twitter:description"/><meta content="Имплиситы (implicits) – одна из наиболее вызывающих опасения фич языка программирования Scala, и на то есть веские причины! Во-первых, понятие имплиcитов довольно специфично для Scala. Ни один другой..." data-vmid="aiturec:description" data-vue-meta="ssr" property="aiturec:description"/><meta content="https://habrastorage.org/getpro/habr/upload_files/9eb/376/7a8/9eb3767a857f092a4e83d51315c68f15.png" data-vmid="image:itemprop" data-vue-meta="ssr" itemprop="image"/><meta content="https://habrastorage.org/getpro/habr/upload_files/9eb/376/7a8/9eb3767a857f092a4e83d51315c68f15.png" data-vmid="og:image" data-vue-meta="ssr" property="og:image"/><meta content="1200" data-vmid="og:image:width" data-vue-meta="ssr" property="og:image:width"/><meta content="630" data-vmid="og:image:height" data-vue-meta="ssr" property="og:image:height"/><meta content="https://habrastorage.org/getpro/habr/upload_files/9eb/376/7a8/9eb3767a857f092a4e83d51315c68f15.png" data-vmid="aiturec:image" data-vue-meta="ssr" property="aiturec:image"/><meta content="https://habrastorage.org/getpro/habr/upload_files/9eb/376/7a8/9eb3767a857f092a4e83d51315c68f15.png" data-vmid="twitter:image" data-vue-meta="ssr" name="twitter:image"/><meta content="https://habrastorage.org/getpro/habr/upload_files/9eb/376/7a8/9eb3767a857f092a4e83d51315c68f15.png?format=vk" data-vmid="vk:image" data-vue-meta="ssr" property="vk:image"/><meta content="718628" data-vmid="aiturec:item_id" data-vue-meta="ssr" property="aiturec:item_id"/><meta content="2023-02-22T14:53:23.000Z" data-vmid="aiturec:datetime" data-vue-meta="ssr" property="aiturec:datetime"/><meta content="https://habr.com/ru/company/otus/blog/718628/" data-vmid="og:url" data-vue-meta="ssr" property="og:url"/><meta content="article" data-vmid="og:type" data-vue-meta="ssr" property="og:type"/><meta content="ru_RU" data-vmid="og:locale" data-vue-meta="ssr" property="og:locale"/><meta content="scala, ZIO, scala разработчик, неявные параметры" data-vue-meta="ssr" name="keywords"/>

<meta content="#303b44" name="apple-mobile-web-app-status-bar-style"/>
<meta content="#629FBC" name="msapplication-TileColor"/>
<meta content="yes" name="apple-mobile-web-app-capable"/>
<meta content="yes" name="mobile-web-app-capable"/>
































</head>
<body>
<div data-async-called="true" data-server-rendered="true" id="app"><div class="tm-layout__wrapper"><!-- --> <div></div> <div class="tm-feature tm-feature"><!-- --></div> <header class="tm-header"><div class="tm-page-width"><div class="tm-header__container"><div class="tm-header__burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#header-burger"></use></svg></button></div> <span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_ru" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a> <span class="tm-header__beta-sign" style="display:none;">β</span></span> <!-- --> <div class="tm-header-user-menu tm-header_user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#search"></use></svg></a> <!-- --> <!-- --> <!-- --> <div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="menu-toggle-guest"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_white" height="24" width="24"><title>Профиль</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#header-user"></use></svg></button> <!-- --></div> <!-- --></div></div></div></header> <div class="tm-layout"><div class="tm-page-progress-bar"></div> <!-- --> <!-- --> <div class="tm-page-width"></div> <main class="tm-layout__container"><div class="tm-page" companyname="otus" data-async-called="true" hl="ru"><div class="tm-page-width"><div class="tm-page__header"><!-- --></div> <div class="tm-page__wrapper"><div class="tm-page__main tm-page__main_has-sidebar"><div class="pull-down"><!-- --> <div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__arrow" height="24" width="24"><title>Обновить</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#pull-arrow"></use></svg></div></div> <div class="tm-article-presenter"> <div class="tm-article-presenter__body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><div class="tm-article-presenter__header"> <div class="tm-article-snippet tm-article-presenter__snippet tm-article-snippet"><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" href="/ru/users/MaxRokatansky/" title="MaxRokatansky"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w32/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg" width="32"/></div></a> <span class="tm-user-info__user"><a class="tm-user-info__username" href="/ru/users/MaxRokatansky/">
      MaxRokatansky
      <!-- --></a> <span class="tm-article-datetime-published"><time datetime="2023-02-22T14:53:23.000Z" title="2023-02-22, 17:53">5 часов назад</time></span></span></span></div> <!-- --></div> <h1 class="tm-article-snippet__title tm-article-snippet__title_h1" lang="ru"><span>Неявные параметры. Когда их следует использовать? Часть 1</span></h1> <div class="tm-article-snippet__stats"><!-- --> <div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#clock"></use></svg></span> <span class="tm-article-reading-time__label">
    11 мин
  </span></div> <span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-views"></use></svg> <span class="tm-icon-counter__value">388</span></span></div> <div class="tm-article-snippet__hubs-container"><div class="tm-article-snippet__hubs"><span class="tm-article-snippet__hubs-item"><a class="tm-article-snippet__hubs-item-link router-link-active" href="/ru/company/otus/blog/"><span>Блог компании OTUS</span> <!-- --></a></span><span class="tm-article-snippet__hubs-item"><a class="tm-article-snippet__hubs-item-link" href="/ru/hub/programming/"><span>Программирование</span> <span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span></a></span><span class="tm-article-snippet__hubs-item"><a class="tm-article-snippet__hubs-item-link" href="/ru/hub/scala/"><span>Scala</span> <span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span></a></span></div></div> <div class="tm-article-snippet__labels-container"><div class="tm-article-snippet__labels"><!-- --> <div class="tm-article-snippet__label tm-article-snippet__label tm-article-snippet__label_variant-translation"><span>
          Перевод
        </span></div></div></div> <!-- --> <!-- --></div></div> <div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://scalajobs.com/blog/implicit-parameters-when-to-use-them-part-1/" target="_blank">
                Автор оригинала:
                <span>
                  Julien Truffaut
                </span></a></div> <div class="tm-article-body" data-gallery-root="" lang="ru"><div></div> <div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Имплиситы (implicits) – одна из наиболее вызывающих опасения фич языка программирования Scala, и на то есть веские причины!</p><p>Во-первых, понятие имплиcитов довольно специфично для Scala. Ни один другой основной язык программирования не имеет подобной концепции. Это означает, что у начинающих разработчиков Scala нет шаблонов, на которые можно было бы опереться, чтобы правильно использовать имплиситы.</p><p>Во-вторых, в Scala 2 ключевое слово implicit используется слишком часто (подобно <code>_</code>). Поэтому потребуется достаточное количество времени и практики, чтобы провести грань между различными вариантами использования имплиcитов. В этом отношении Scala 3 значительно улучшила ситуацию, введя специальный синтаксис для каждого случая использования имплиcита.</p><p>Данная публикация блога будет посвящена Scala 2, поскольку в настоящее время это наиболее используемая основная версия Scala. Однако по ходу статьи я буду упоминать о тех различиях, которые появились в Scala 3 относительно имплиcитов.</p><p>Итак, перед тем как углубиться в шаблоны проектирования с неявными параметрами, стоит потратить несколько минут на рассмотрение того, как они [неявные параметры] работают.</p><h3>Определение</h3><p>Конструктор функции или класса может иметь явные и неявные параметры, которые являются явными по умолчанию. Они становятся неявными, только если мы добавляем ключевое слово <code>implicit</code> в начале круглых скобок.</p><pre><code>def sorted[A](list: List[A])(implicit ordering: Ordering[A]): List[A]
​
class UserService(config: Config)(implicit ec: ExecutionContext) { }</code></pre><p>В приведенных выше примерах <code>list</code> является явным параметром, а <code>ordering</code> - неявным параметром функции <code>sorted</code>. Конструктор класса ведет себя идентично простым функциям, поэтому в оставшейся части статьи я буду использовать только примеры с обычными функциями.</p><p>Обратите внимание, что явные и неявные параметры всегда определяются в виде отдельных наборов круглых скобок. В Scala 2 все неявные параметры должны быть определены в последнем наборе круглых скобок. В Scala 3 этого ограничения больше не существует.</p><h3>Варианты использования</h3><p>Допустим, у нас есть метод <code>createEmptyBlogPost</code>, который принимает как явный, так и неявный параметр (позже я объясню, почему я сделал такой выбор).</p><pre><code>def createEmptyBlogPost(title: String)(implicit requesterId: UserId): BlogPost =
  BlogPost(
    author  = requesterId,
    title   = title,
    content = ""
  )
​
case class BlogPost(
  userId : UserId,
  title  : String,
  content: String,
)
​
case class UserId(value: String)</code></pre><p>Как вызвать функцию <code>createEmptyBlogPost</code>? Первый вариант - передать неявный параметр в явном виде.</p><pre><code>createEmptyBlogPost("Scala Implicits: The complete guide")(`UserId("john_1234")`)
// res: BlogPost = BlogPost(
//   author  = UserId("john_1234"),
//   title   = "Scala Implicits: The complete guide",
//   content = "",
// )</code></pre><p>Однако это не является идиоматичным. Обычно неявные параметры не указываются разработчиками. Вместо этого компилятор автоматически передает их в функцию. Это одна из форм внедрения зависимости.</p><pre><code>createEmptyBlogPost("Scala Implicits: The complete guide") // Implicit call
// res: BlogPost = BlogPost(
//   author  = UserId("john_1234"),
//   title   = "Scala Implicits: The complete guide",
//   content = "",
// )</code></pre><p>Теперь возникает вопрос: как компилятор узнает, какое значение следует ввести?</p><p>Компилятор поддерживает карту, где ключ – это тип, а значение – значение типа ключа (это не совсем то, как это действительно реализовано в компиляторе, но является хорошей ментальной моделью). Например,</p><pre><code>val ImplicitValues: Map[Type, Value] =  // pseudo-code
  Map(
    Int     -&gt; 5,
    String  -&gt; "",
    UserId  -&gt; UserId("john_1234"),
  )</code></pre><p>Затем, когда компилятору нужно передать неявный параметр типа UserId, он находит значение по ключу <code>UserId</code>, которое равно <code>UserId(&amp;quot;john_1234&amp;quot;)</code>, и вставляет его в функцию <code>createEmptyBlogPost</code>. Все это происходит во время компиляции, а значит, на рантайм программы имплиситы не влияют!</p><p>Что будет, если для типа <code>UserId</code> не найдется ключа? В этом случае компилятор выдает ошибку компиляции. Например,</p><pre><code>val ImplicitValues: Map[Type, Value] =  // pseudo-code
  Map(
    Int     -&gt; 5,
    String  -&gt; "",
    // No entry for UserId
  )
​
createEmptyBlogPost("Scala Implicits: The complete guide")
error: could not find implicit value for parameter requesterId: UserId</code></pre><p>Наконец, как сообщить компилятору, что <code>UserId(&amp;quot;john_1234&amp;quot;)</code> должно быть неявным значением для типа UserId?</p><p>Нужно использовать ключевое слово implicit, но на этот раз перед <code>val</code> или <code>def</code>. Например,</p><pre><code>implicit val requesterId: UserId = UserId("john_1234")</code></pre><p>Обратите внимание, что неявные определения имеют область видимости, как и обычные значения. В следующем примере первый вызов <code>createEmptyBlogPost</code> компилируется, потому что неявное значение <code>requesterId</code> определено в тех же фигурных скобках, где вызывается функция, а второй вызов<strong> </strong><code>&lt;/span&gt;&lt;span style="font-size:11pt;font-family:'Roboto Mono',monospace;color:#000000;background-color:transparent;font-weight:700;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;"&gt;createEmptyBlogPost&lt;/span&gt;&lt;span style="font-size:11pt;font-family:Arial;color:#000000;background-color:transparent;font-weight:400;font-style:normal;font-variant:normal;text-decoration:none;vertical-align:baseline;white-space:pre;white-space:pre-wrap;"&gt;</code> не компилируется, потому что здесь этого значения не видно.</p><pre><code>class BlogPostTest extends AnyFunSuite {
​
  test("createEmptyBlogPost gets the author implicitly") {
    implicit val requesterId: UserId = UserId("john_1234")
​
    val result = createEmptyBlogPost("Scala Implicits: The complete guide") // ✅ Compile
​
    assert(result.author == requesterId)
  }
​
  test("createEmptyBlogPost has no content") {
    val result = createEmptyBlogPost("Scala Implicits: The complete guide") // ❌ could not find implicit value
​
    assert(result.content.isEmpty)
  }
​
}</code></pre><p>Если мы переместим определение <code>requesterId</code> на строчку выше (первая строчка внутри класса BlogPostTest), то оба вызова <code>createEmptyBlogPost</code> будут скомпилированы.</p><p>Неявные значения также могут быть импортированы из другой области видимости. Например,</p><pre><code>object User {
  implicit val defaultUser: User = UserId("john_1234")
}
​
import User.defaultUser // or User._
​
createEmptyBlogPost("Scala Implicits: The complete guide") // ✅ Compile</code></pre><p>Давайте подытожим то, что мы видели до сих пор о неявных параметрах: Компилятор отслеживает все неявные параметры, доступные в области видимости. Во время компиляции компилятор вводит все неявные параметры, не переданные явно. Если неявный параметр отсутствует, мы получаем ошибку компиляции "could not find implicit value… (не удалось найти неявное значение)". Если в одной области видимости есть два или более неявных значения одного типа, мы получим другую ошибку компиляции: "ambiguous implicit ... (неоднозначное неявное значение)".</p><p>Для последнего случая пример мы еще не рассмотрели, но он весьма показателен, поскольку компилятору необходимо вводить значения, просматривая их тип. Поэтому, если для каждого типа существует более одного значения, компилятор не может решить, какое из них выбрать. Это неоднозначно (ambiguous) - именно так и следует из сообщения об ошибке.</p><p>Обратите внимание, что можно создать несколько имплиситов с одним и тем же типом и определить некий приоритет для компилятора. Однако, использование такой фичи является достаточно сложным. Если вам понадобилась данная возможность и вы не пишете универсальную библиотеку, то, скорее всего, вы неправильно используете параметры имплиситов, и вам лучше передавать аргументы явно.</p><p>Теперь, когда мы знаем, как работают неявные параметры, давайте рассмотрим два хороших юзкейса для данной фичи.</p><h3>Шаблон окружения</h3><p>Шаблон окружения получил свое название от переменных среды окружения, используемых в скриптах оболочки и платформах CI/CD. Идея заключается в том, что большинство параметров меняется каждый раз, когда мы вызываем функцию, но некоторые из них являются статичными в рамках сессии, например JAVA_HOME или SBT_OPTS. Эти параметры окружения обычно инициализируются в начале сеанса и остаются неизменными до его завершения.</p><p>Давайте посмотрим, как этот паттерн реализуется в Scala. Допустим, мы работаем над http-сервисом для управления записями в блогах.</p><pre><code>val httpService = {
  case req @ POST   -&gt; Root / "blog"      =&gt; // create a blog
  case req @ PUT    -&gt; Root / "blog" / id =&gt; // update a blog
  case req @ DELETE -&gt; Root / "blog" / id =&gt; // delete a blog
}</code></pre><p>Данный интерфейс REST является единственной точкой входа в наше приложение, а это значит, что в любой момент времени мы должны располагать сведениями о пользователе, сделавшем запрос. Настоящая информация может быть полезна во многих местах, например, для определения автора записи в блоге или пользователя, который сделал последнее обновление. Поскольку данный идентификатор пользователя присутствует повсеместно, мы бы не хотели передавать его вручную в каждую функцию. Давайте сделаем это неявно!</p><p>Первое, что мы делаем при реализации эндпоинта, - аутентифицируем пользователя, сделавшего запрос. После аутентификации мы присваиваем UserId неявное значение и вызываем метод <code>create</code> класса <code>BlogAPI</code>.</p><pre><code>case req @ POST -&gt; Root / "blog" =&gt;
  implicit val requesterId: UserId = extractRequesterId(req)
​
  for {
    payload &lt;- req.parseBodyAs[NewBlog]
    _       &lt;- blogAPI.create(payload.title)
  } yield Ok()</code></pre><p><code>BlogAPI.create</code> в свою очередь вызывает чистую функцию <code>createEmptyBlogPost</code> и сохраняет результат в базе данных.</p><pre><code>class BlogAPI(db: DB) {
  def create(title: String)(implicit requesterId: UserId): Future[Unit] = {
    val newBlog = createEmptyBlogPost(title)
    db.save(newBlog)
  }
}
​
def createEmptyBlogPost(title: String)(`implicit requesterId: UserId`): BlogPost =
  BlogPost(
    author  = requesterId,
    title   = title,
    content = "",
  )</code></pre><p>Резюмируя, можно сказать, что паттерны окружения работают следующим образом: Когда сервер получает http-запрос, мы отмечаем UserId запрашивающего как <strong>неявное</strong> значение. Все последующие методы принимают UserId в качестве неявного параметра.</p><p>Преимущества этого паттерна следующие: Не загромождаем логику, передавая везде UserId. Это не имеет существенного значения для единственного параметра, зато мы можем захотеть передавать другие контекстные значения, такие как идентификатор корреляции или спан для трассировки. Получаем гарантию того, что вся наша логика будет использовать один и тот же <code>requesterId</code> в запросе. Такая уверенность достигается благодаря использованию неявного параметра, который обеспечивает уникальное значение для каждого типа, и тому факту, что мы не передаем неявные параметры в явном виде.</p><p>Давайте посмотрим на второй пример паттерна окружения, используя другой вид контекста.</p><p>Представьте, что мы хотим расширить нашу структуру данных<strong> </strong><code>BlogPost</code>, чтобы включить метку времени, указав таким образом, когда он был создан. Самый простой способ сделать это - добавить поле <code>createdAt</code> в кейс-класс <code>BlogPost</code> и модифицировать <code>createEmptyBlogPost</code>, инициализировав <code>createdAt</code> с помощью <code>Instant.now()</code>.</p><pre><code>case class BlogPost(
  author  : UserId,
  title   : String,
  content : String,
  createdAt: Instant,
)
​
def createEmptyBlogPost(title: String)(implicit requesterId: UserId): BlogPost =
  BlogPost(
    author   = requesterId,
    title    = title,
    content  = "",
    createAt = Instant.now(),
  )</code></pre><p>Это отлично работает и отличается простотой. К сожалению, такой код сложно тестировать, поскольку <code>Instant.now()</code> недетерминирована. Каждый раз, когда мы вызываем данную функцию, мы получаем разный результат, что делает нашу логику трудно тестируемой.</p><pre><code>test("create blog post") {
  implicit val requesterId: UserId = UserId("john_1234")
​
  val result = createEmptyBlogPost("Test")
​
  assert(result == BlogPost(requesterId, "Test", "", ???)) // which timestamp?
}</code></pre><p>Есть способы обойти эту проблему, например: Игнорировать метку времени при сравнении двух BlogPost в наших тестах. Перехватить вызов Instant.now() с помощью какого-нибудь мок-фреймворка и переопределить его.</p><p>Однако эти два решения чреваты ошибками. На мой взгляд, лучший подход заключается в определении интерфейса <code>Clock</code> с двумя имплементациями: одна для продакшена и другая для тестов:</p><pre><code>trait Clock {
  def now(): Instant
}
​
object Clock {
  val real: Clock = new Clock {
    def now(): Instant = Instant.now()
  }
​
  def static(timestamp: Instant): Clock = new Clock {
    def now(): Instant = timestamp
  }
}</code></pre><p><code>Clock.real</code> – это реальные системные часы, использующие <code>Instant.now()</code>, в то время как <code>Clock.static</code> всегда возвращают одно и то же время.</p><p>Затем нам нужно обновить <code>createEmptyBlogPost</code>, чтобы он принимал имплисит <code>Clock</code>:</p><pre><code>def createEmptyBlogPost(title: String)(implicit requesterId: UserId, clock: Clock): BlogPost =
  BlogPost(
    author   = requesterId,
    title    = title,
    content  = "",
    createAt = clock.now(),
  )</code></pre><p>Наконец, нам нужно установить значение среды<strong> </strong><code>Clock</code> как неявное в начале контекста.</p><p><code>Clock.real</code> предназначено для всего нашего продакшн-кода, поэтому мы должны инициализировать его в классе <code>Main</code> нашего приложения:</p><pre><code>object Main extends App {
  implicit val clock: Clock = Clock.real
  ...
}</code></pre><p><code>Clock.static</code> предназначен для нашего тестового кода, поэтому мы можем инициализировать его внутри отдельных тестов или в начале тестового набора. Например,</p><pre><code>class BlogPostTest extends AnyFunSuite {
  implicit val clock: Clock = Clock.static(Instant.EPOCH)
  ...
​
}</code></pre><p>Если вы работали со Scala Futures, то уже сталкивались с этим паттерном. Действительно, почти все методы API <code>Future</code> требуют неявного <code>ExecutionContext</code> (своего рода пул потоков). Обычно приложения, использующие Futures, определяют продакшн <code>ExecutionContext</code> в основной части приложения:</p><pre><code>object Main extends App {
  implicit val ec: ExecutionContext = ExecutionContext.global
  ...
}</code></pre><p>Отдельные тестовые файлы могут решить использовать собственный <code>ExecutionContext</code>, например, с одним потоком:</p><pre><code>class BlogDatabaseTest extends AnyFunSuite {
  implicit val ec: ExecutionContext = `fixedSizeExecutionContext(1)`
  ...
​
}</code></pre><p>Подводя итог, мы увидели, что параметры среды статичны в определенном контексте, а сам контекст может быть разным. Сегодня мы рассмотрели два примера контекста: контекст для каждого запроса и контекст продакшн в сравнении с тестированием.</p><p>Важно, чтобы каждый в нашей команде мог четко определить границы контекста, потому что параметры среды меняются только при изменении контекста. Поэтому я бы рекомендовал использовать четкий и простой контекст.</p><p>Ещё одним важным моментом является использование точных типов для переменных окружения. Это связано с тем, что имплисит требует уникального значения для каждого типа, а дженерик-типы, такие как Int, Boolean, String или LocalDate, могут использоваться для различных кодировок.</p><pre><code>def createQueue[A](implicit size: Int): Queue[A] =
  ...
​
def connect(hostname: String)(implicit port: Int): Unit =
  ...</code></pre><p>Если вы хотите передавать номер порта в качестве параметра среды, я рекомендую создать тип-обертку:</p><pre><code>case class PortNumber(value: Int)
​
// or even better
case class HttpServerPortNumber(value: Int)</code></pre><p>Самый важный вывод о неявных параметрах заключается в том, что значения, введенные компилятором, должны быть очевидными! Если вам нужно проверить импорт или запустить отладчик, чтобы выяснить, какое значение было введено, это значит, что оно не очевидно, и лучше передавать значения явно.</p><h3>Бонус: Альтернативные реализации паттерна окружения</h3><p><strong>Параметры класса</strong></p><p>Возможно, это и так очевидно, но самый простой способ совместного использования параметров несколькими функциями - упаковать их в класс и передать в конструктор. Такой способ хорошо работает, если общие параметры инициализируются в начале приложения (например, пул потоков или http-клиент), но не очень подходит для недолговечных параметров, таких как идентификатор запрашивающего или идентификатор корреляции.</p><p><strong>ThreadLocal</strong></p><p>ThreadLocal позволяет нам устанавливать и получать доступ к переменным внутри потока. Этот метод хорош тем, что нам не нужно менять сигнатуру наших функций. Однако он не очень хорошо работает с параллелизмом/конкуренцией, так как правильно передать параметры крайне сложно, что часто приводит к ошибкам.</p><p><strong>Reader</strong></p><p>Reader - это конструктор типов: <code>Reader[R, A]</code>, где <code>R</code> представляет тип параметров окружения, а <code>A</code> - результат вычислений.</p><p>Вот как будет выглядеть наш пример поста в блоге с <code>Reader</code>:</p><pre><code>def createEmptyBlogPost(title: String): Reader[(UserId, Clock), BlogPost] = ...</code></pre><p>Как вы видите, возвращаемый тип изменился с <code>BlogPost</code> на <code>Reader[R, BlogPost]</code>, а два неявных параметра переместились в параметр типа <code>R</code>.</p><p><code>Reader</code> позволяет нам объединить несколько<strong> </strong><code>Reader</code> вместе с помощью for-генерации. Однако это работает только в том случае, если все <code>Reader</code> имеют одинаковый <code>R</code>. Например, этот код не компилируется, потому что <code>createProject</code> требует только <code>UserId</code>, а не <code>Clock</code>.</p><pre><code>def createProject(projectName: String): Reader[UserId,  Project] = ...
​
for {
  blog    &lt;- createBlogPost("Implicits for the noob")
  project &lt;- createProject("tutorial") ❌doesn’t compile
} yield ...</code></pre><p>Поэтому если мы хотим применить подход <code>Reader</code>, нам нужно либо использовать одни и те же переменные окружения для всех функций, либо соответствующим образом сузить или расширить тип R, что зачастую оказывается более многословным, и сильно перегружено по сравнению с явными параметрами.</p><p>В <a href="https://typelevel.org/cats/"><strong>cats</strong></a> (typelevel) <code>Reader</code> называется <code>Kleisli</code>. Более подробную информацию вы можете найти <a href="https://typelevel.org/cats/datatypes/kleisli.html"><strong>здесь</strong></a>.</p><p><strong>ZIO</strong></p><p><code>ZIO</code> также является конструктором типов, но с тремя параметрами типа: <code>ZIO[R, E, A]</code>, где <code>R</code> тоже представляет тип параметров окружения. Однако <code>ZIO</code> устраняет недостаток <code>Reading</code>, используя дисперсию. В двух словах это означает, что мы можем компоновать значения <code>ZIO</code> с различными переменными окружения, и компилятор автоматически расширяет тип <code>R</code> соответствующим образом.</p><p>Более подробную информацию можно найти на официальном <a href="https://zio.dev/reference/core/zio/">сайте</a> ZIO.</p><hr/><p>А продолжить знакомство с ZIO предлагаем на открытом уроке в OTUS. На этом уроке мы: <br/>– Узнаем о предпосылках и истории возникновения ZIO. <br/>– Сформируем представление, какие задачи решают так называемые «функциональные эффекты» в целом и ZIO в частности. <br/>– Попрактикуемся в создании и комбинировании ZIO-эффектов.</p><p>Занятие будет полезно Scala-разработчикам, которые пока не знакомы с концепцией функционального программирования эффектов в целом или с ZIO в качестве представителя этой концепции.</p><p>Регистрация на урок открыта на странице курса <a href="https://otus.pw/p0rs/">«Scala-разработчик».</a></p></div></div></div> <!-- --> <!-- --></div> <!-- --> <!-- --></div> <!-- --> <div class="tm-article-presenter__meta"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bscala%5D">scala</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5BZIO%5D">ZIO</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bscala%20%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%5D">scala разработчик</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BD%D0%B5%D1%8F%D0%B2%D0%BD%D1%8B%D0%B5%20%D0%BF%D0%B0%D1%80%D0%B0%D0%BC%D0%B5%D1%82%D1%80%D1%8B%5D">неявные параметры</a></li></ul></div> <div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a class="tm-hubs-list__link router-link-active" href="/ru/company/otus/blog/">Блог компании OTUS</a></li><li class="tm-separated-list__item"><a class="tm-hubs-list__link" href="/ru/hub/programming/">Программирование</a></li><li class="tm-separated-list__item"><a class="tm-hubs-list__link" href="/ru/hub/scala/">Scala</a></li></ul></div></div></article></div> <!-- --></div> <div class="tm-article-sticky-panel"><div class="tm-data-icons tm-article-sticky-panel__icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 5: ↑4 и ↓1</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-rating"></use></svg> <span class="tm-votes-meter__value tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating" title="Всего голосов 5: ↑4 и ↓1">+3</span></div> <div class="v-portal" style="display:none;"></div></div> <!-- --> <!-- --> <button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-favorite"></use></svg></span> <span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">
    6
  </span></button> <div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" href="/ru/company/otus/blog/718628/comments/"><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value">
      3
    </span></a> <!-- --></div> <div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button> <div class="v-portal" style="display:none;"></div></div> <div class="v-portal" style="display:none;"></div></div> </div></div> <div class="v-portal" style="display:none;"></div> <div class="tm-article-presenter__footer"><div class="tm-article-blocks"><!-- --> <div></div> <section class="tm-block tm-block tm-block_spacing-bottom"><!-- --> <div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><div class="tm-article-author"><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/company/otus/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/2d5/0ed/b57/2d50edb57cf45fa07cc4f39f53b78395.png" width="40"/></div></a> <div class="tm-company-snippet__info"><a class="tm-company-snippet__title" href="/ru/company/otus/profile/">OTUS</a> <div class="tm-company-snippet__description">Цифровые навыки от ведущих экспертов</div></div></div> <div class="tm-article-author__buttons"><!-- --> <!-- --></div></div> <div class="tm-article-author__company-contacts"><a class="tm-article-author__contact" href="https://otus.ru" rel="noopener" target="_blank">
      Сайт
    </a><a class="tm-article-author__contact" href="https://vk.com/club145052891" rel="noopener" target="_blank">
      ВКонтакте
    </a><a class="tm-article-author__contact" href="https://telegram.me/Otusjava" rel="noopener" target="_blank">
      Telegram
    </a></div> <div class="tm-article-author__separator"></div></div> <div class="tm-user-card tm-article-author__user-card tm-user-card tm-user-card_variant-article"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/MaxRokatansky/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg"/></div></a> <div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 861 голос "><div class="tm-counter-container__header"><div class="tm-karma__votes tm-karma__votes_positive">
      51
    </div></div> <div class="tm-counter-container__footer"><div class="tm-karma__text">
      Карма
    </div> <div class="v-portal" style="display:none;"></div></div></div> <div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"> <div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --> <div class="tm-votes-lever__score tm-votes-lever__score tm-votes-lever__score_appearance-rating"><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter tm-votes-lever__score-counter_rating">
        138.8
      </span></div> <!-- --></div></div> <div class="tm-counter-container__footer"><span class="tm-rating__text tm-rating__text">
      Рейтинг
    </span></div></div></div></div></div> <div class="tm-user-card__info tm-user-card__info tm-user-card__info_variant-article"><div class="tm-user-card__title tm-user-card__title tm-user-card__title_variant-article"><span class="tm-user-card__name tm-user-card__name tm-user-card__name_variant-article">OTUS</span> <a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/MaxRokatansky/">
          @MaxRokatansky
        </a> <!-- --></div> <p class="tm-user-card__short-info tm-user-card__short-info tm-user-card__short-info_variant-article">Редактор</p></div></div> <div class="tm-user-card__buttons tm-user-card__buttons tm-user-card__buttons_variant-article"><!-- --> <!-- --> <!-- --> <!-- --> <!-- --></div></div> <!-- --></div> <div class="v-portal" style="display:none;"></div></div> <!-- --></section> <!-- --> <div class="tm-article-blocks__comments"><div class="tm-article-page-comments"><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" href="/ru/company/otus/blog/718628/comments/"><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted">
       Комментарии 3 
    </span></a> <!-- --></div></div></div> <section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2> </div> <!-- --></header> <div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><div class="tm-tabs tm-tabs"><div><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim">
        Лучшие за сутки
      </button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_slim">
        Похожие
      </button></span></div> <!-- --></div> <div class="similar-and-daily__tab-view"><div><!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <div class="tm-placeholder-article-cards"><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div></div> <!-- --> <!-- --> <!-- --> <!-- --></div> <!-- --></div></div> <!-- --></section> <div><!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div> <div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li></ul></div> <div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --></div> <!-- --> </div></div></div></div></div> <div class="tm-page__sidebar"><!-- --></div></div></div></div></main> <!-- --></div> <!-- --> <div class="tm-footer"><div class="tm-page-width"><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link router-link-active" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div> <div class="tm-footer__social"><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Facebook</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Twitter</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>VK</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-vkontakte"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Telegram</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Youtube</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://zen.yandex.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Яндекс Дзен</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-zen"></use></svg></a></div> <div class="v-portal" style="display:none;"></div> <button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#lang"></use></svg>
        Настройка языка
      </button> <a class="tm-footer__link" href="/ru/feedback/">
        Техническая поддержка
      </a> <a class="tm-footer__link" href="/berserk-mode-nope">
        Вернуться на старую версию
      </a> <div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2023, </span> <span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div></div></div> <!-- --> <!-- --></div> <div class="vue-portal-target"></div></div>








</body>
</html>
