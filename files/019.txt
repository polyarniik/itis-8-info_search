<!DOCTYPE html>

<html data-vue-meta="%7B%22lang%22:%7B%22ssr%22:%22ru%22%7D%7D" lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0" name="viewport"/>
<meta content="unsafe-url" name="referrer"/>
<title>Реальная инженерная трансформация: от команд и метрик до культуры, конвейеров и инфраструктуры / Хабр</title>







<meta content="2.113.0" name="habr-version"/>
<meta content="444736788986613" data-vue-meta="ssr" property="fb:app_id"/><meta content="472597926099084" data-vue-meta="ssr" property="fb:pages"/><meta content="summary_large_image" data-vue-meta="ssr" name="twitter:card"/><meta content="@habr_com" data-vue-meta="ssr" name="twitter:site"/><meta content="Хабр" data-vmid="og:site_name" data-vue-meta="ssr" property="og:site_name"/><meta content="Реальная инженерная трансформация: от команд и метрик до культуры, конвейеров и инфраструктуры" data-vmid="og:title" data-vue-meta="ssr" property="og:title"/><meta content="Реальная инженерная трансформация: от команд и метрик до культуры, конвейеров и инфраструктуры" data-vmid="twitter:title" data-vue-meta="ssr" name="twitter:title"/><meta content="Реальная инженерная трансформация: от команд и метрик до культуры, конвейеров и инфраструктуры" data-vmid="aiturec:title" data-vue-meta="ssr" name="aiturec:title"/><meta content="Привет, Хабр! На&amp;nbsp;этапе выбора темы статьи&amp;nbsp;было много идей: написать про&amp;nbsp;DevOps или&amp;nbsp;про&amp;nbsp;платформы, а&amp;nbsp;может про&amp;nbsp;продуктовые команды или&amp;nbsp;про&amp;nbsp;практики SRE?..." data-vmid="description" data-vue-meta="ssr" name="description"/><meta content="Привет, Хабр! На&amp;nbsp;этапе выбора темы статьи&amp;nbsp;было много идей: написать про&amp;nbsp;DevOps или&amp;nbsp;про&amp;nbsp;платформы, а&amp;nbsp;может про&amp;nbsp;продуктовые команды или&amp;nbsp;про&amp;nbsp;практики SRE?..." data-vmid="description:itemprop" data-vue-meta="ssr" itemprop="description"/><meta content="Привет, Хабр! На&amp;nbsp;этапе выбора темы статьи&amp;nbsp;было много идей: написать про&amp;nbsp;DevOps или&amp;nbsp;про&amp;nbsp;платформы, а&amp;nbsp;может про&amp;nbsp;продуктовые команды или&amp;nbsp;про&amp;nbsp;практики SRE?..." data-vmid="og:description" data-vue-meta="ssr" property="og:description"/><meta content="Привет, Хабр! На&amp;nbsp;этапе выбора темы статьи&amp;nbsp;было много идей: написать про&amp;nbsp;DevOps или&amp;nbsp;про&amp;nbsp;платформы, а&amp;nbsp;может про&amp;nbsp;продуктовые команды или&amp;nbsp;про&amp;nbsp;практики SRE?..." data-vmid="twitter:description" data-vue-meta="ssr" name="twitter:description"/><meta content="Привет, Хабр! На&amp;nbsp;этапе выбора темы статьи&amp;nbsp;было много идей: написать про&amp;nbsp;DevOps или&amp;nbsp;про&amp;nbsp;платформы, а&amp;nbsp;может про&amp;nbsp;продуктовые команды или&amp;nbsp;про&amp;nbsp;практики SRE?..." data-vmid="aiturec:description" data-vue-meta="ssr" property="aiturec:description"/><meta content="https://habrastorage.org/getpro/habr/upload_files/680/381/c0e/680381c0e2ff0d08bd536cc8742c871f.jpg" data-vmid="image:itemprop" data-vue-meta="ssr" itemprop="image"/><meta content="https://habrastorage.org/getpro/habr/upload_files/680/381/c0e/680381c0e2ff0d08bd536cc8742c871f.jpg" data-vmid="og:image" data-vue-meta="ssr" property="og:image"/><meta content="1200" data-vmid="og:image:width" data-vue-meta="ssr" property="og:image:width"/><meta content="630" data-vmid="og:image:height" data-vue-meta="ssr" property="og:image:height"/><meta content="https://habrastorage.org/getpro/habr/upload_files/680/381/c0e/680381c0e2ff0d08bd536cc8742c871f.jpg" data-vmid="aiturec:image" data-vue-meta="ssr" property="aiturec:image"/><meta content="https://habrastorage.org/getpro/habr/upload_files/680/381/c0e/680381c0e2ff0d08bd536cc8742c871f.jpg" data-vmid="twitter:image" data-vue-meta="ssr" name="twitter:image"/><meta content="https://habrastorage.org/getpro/habr/upload_files/680/381/c0e/680381c0e2ff0d08bd536cc8742c871f.jpg?format=vk" data-vmid="vk:image" data-vue-meta="ssr" property="vk:image"/><meta content="718504" data-vmid="aiturec:item_id" data-vue-meta="ssr" property="aiturec:item_id"/><meta content="2023-02-22T13:03:20.000Z" data-vmid="aiturec:datetime" data-vue-meta="ssr" property="aiturec:datetime"/><meta content="https://habr.com/ru/company/moex/blog/718504/" data-vmid="og:url" data-vue-meta="ssr" property="og:url"/><meta content="article" data-vmid="og:type" data-vue-meta="ssr" property="og:type"/><meta content="ru_RU" data-vmid="og:locale" data-vue-meta="ssr" property="og:locale"/><meta content="devops, трансформация, platform engineering, коммуникации, топологии, лидерство, команда, разработка, ci/cd, devsecops" data-vue-meta="ssr" name="keywords"/>

<meta content="#303b44" name="apple-mobile-web-app-status-bar-style"/>
<meta content="#629FBC" name="msapplication-TileColor"/>
<meta content="yes" name="apple-mobile-web-app-capable"/>
<meta content="yes" name="mobile-web-app-capable"/>
































</head>
<body>
<div data-async-called="true" data-server-rendered="true" id="app"><div class="tm-layout__wrapper"><!-- --> <div></div> <div class="tm-feature tm-feature"><!-- --></div> <header class="tm-header"><div class="tm-page-width"><div class="tm-header__container"><div class="tm-header__burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#header-burger"></use></svg></button></div> <span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_ru" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a> <span class="tm-header__beta-sign" style="display:none;">β</span></span> <!-- --> <div class="tm-header-user-menu tm-header_user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#search"></use></svg></a> <!-- --> <!-- --> <!-- --> <div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="menu-toggle-guest"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_white" height="24" width="24"><title>Профиль</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#header-user"></use></svg></button> <!-- --></div> <!-- --></div></div></div></header> <div class="tm-layout"><div class="tm-page-progress-bar"></div> <!-- --> <!-- --> <div class="tm-page-width"></div> <main class="tm-layout__container"><div class="tm-page" companyname="moex" data-async-called="true" hl="ru"><div class="tm-page-width"><div class="tm-page__header"><!-- --></div> <div class="tm-page__wrapper"><div class="tm-page__main tm-page__main_has-sidebar"><div class="pull-down"><!-- --> <div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__arrow" height="24" width="24"><title>Обновить</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#pull-arrow"></use></svg></div></div> <div class="tm-article-presenter"> <div class="tm-article-presenter__body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><div class="tm-article-presenter__header"> <div class="tm-article-snippet tm-article-presenter__snippet tm-article-snippet"><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" href="/ru/users/Manassian/" title="Manassian"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w32/getpro/habr/avatars/3bd/676/bfa/3bd676bfa945ac38f3f9d184feac9f26.jpg" width="32"/></div></a> <span class="tm-user-info__user"><a class="tm-user-info__username" href="/ru/users/Manassian/">
      Manassian
      <!-- --></a> <span class="tm-article-datetime-published"><time datetime="2023-02-22T13:03:20.000Z" title="2023-02-22, 16:03">6 часов назад</time></span></span></span></div> <!-- --></div> <h1 class="tm-article-snippet__title tm-article-snippet__title_h1" lang="ru"><span>Реальная инженерная трансформация: от команд и метрик до культуры, конвейеров и инфраструктуры</span></h1> <div class="tm-article-snippet__stats"><div class="tm-article-complexity tm-article-complexity_complexity-high"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#complexity-high"></use></svg></span> <span class="tm-article-complexity__label">
    Сложный
  </span></div> <div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#clock"></use></svg></span> <span class="tm-article-reading-time__label">
    25 мин
  </span></div> <span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-views"></use></svg> <span class="tm-icon-counter__value">738</span></span></div> <div class="tm-article-snippet__hubs-container"><div class="tm-article-snippet__hubs"><span class="tm-article-snippet__hubs-item"><a class="tm-article-snippet__hubs-item-link router-link-active" href="/ru/company/moex/blog/"><span>Блог компании MOEX</span> <!-- --></a></span><span class="tm-article-snippet__hubs-item"><a class="tm-article-snippet__hubs-item-link" href="/ru/hub/dev_management/"><span>Управление разработкой</span> <span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span></a></span><span class="tm-article-snippet__hubs-item"><a class="tm-article-snippet__hubs-item-link" href="/ru/hub/agile/"><span>Agile</span> <span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span></a></span><span class="tm-article-snippet__hubs-item"><a class="tm-article-snippet__hubs-item-link" href="/ru/hub/devops/"><span>DevOps</span> <span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span></a></span></div></div> <div class="tm-article-snippet__labels-container"><div class="tm-article-snippet__labels"><div class="tm-article-snippet__label tm-article-snippet__label_variant-case"><span>
          Кейс
        </span></div> </div></div> <!-- --> <!-- --></div></div> <!-- --> <div class="tm-article-body" data-gallery-root="" lang="ru"><div></div> <div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><figure class="full-width"><img data-blurred="true" data-src="https://habrastorage.org/getpro/habr/upload_files/680/381/c0e/680381c0e2ff0d08bd536cc8742c871f.jpg" height="4134" src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/680/381/c0e/680381c0e2ff0d08bd536cc8742c871f.jpg" width="5846"><figcaption></figcaption></img></figure><p>Привет, Хабр! На этапе выбора темы статьи было много идей: написать про DevOps или про платформы, а может про продуктовые команды или про практики SRE? Но пришли к выводу, что нет ничего интереснее, чем реальная увлекательная история трансформации. Мы, команды платформы разработки MOEX и экосистемы Финуслуги.ру, в лице Карапета Манасяна, Александра Барыкова, Антона Квашёнкина и Юлии Лутковской, расскажем практически про весь путь изменений и про их подводные камни. Важно отметить, что в статье затрагивается довольно много тем, местами даже будут блоки со скриптами 😊. Поехалиии!</p><p>Оглавление:</p><blockquote><p><a href="#%D0%BF%D1%80%D0%BE_%D1%84%D0%B8%D0%BD%D1%83%D1%81%D0%BB%D1%83%D0%B3%D0%B8">Про Финуслуги.ру и портфель продуктов</a></p><p><a href="#%D0%B4%D0%BE">1. Как было до изменений?</a></p><p><a href="#%D0%BF%D1%80%D0%B5%D0%B4%D0%BF%D0%BE%D1%81%D1%8B%D0%BB%D0%BA%D0%B8">1.1 Предпосылки</a></p><p><a href="#%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D0%BA%D0%B8_%D0%B4%D0%BE">1.2 Состояние “до”: метрики</a></p><p><a href="#%D0%BA%D0%BE%D0%BD%D0%B2%D0%B5%D0%B9%D0%B5%D1%80_%D0%B4%D0%BE">1.3 Состояние “до”: конвейер производства и CI/CD-процесс</a></p><p><a href="#%D1%82%D1%80%D0%B0%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D1%8F">2. Выбор траектории трансформации</a></p><p><a href="#%D1%82%D0%BE%D0%BF%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F">2.1 Целевая топология и как менялись команды</a></p><p><a href="#%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%B0">2.2 Как создавали сообщества</a></p><p><a href="#change">2.3 Создание модифицирующей или change-команды</a></p><p><a href="#%D1%86%D0%B5%D0%BB%D0%B5%D0%B2%D0%BE%D0%B9_%D0%BA%D0%BE%D0%BD%D0%B2%D0%B5%D0%B9%D0%B5%D1%80">2.4 Целевой конвейер и какую стратегию выбрали</a></p><p><a href="#%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BA%D0%BE%D0%BD%D0%B2%D0%B5%D0%B9%D0%B5%D1%80%D0%B0">Описание самого CI/CD-процесса</a></p><p><a href="#a">a) Почему мигрировали с Jenkins на Gitlab CI в части CD</a></p><p><a href="#b">b) Про структуру CI</a></p><p><a href="#c">c) Про версионирование в целевом подходе</a></p><p><a href="#d">d) CD: почему выбрали ArgoCD</a></p><p><a href="#%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0">2.5 Что изменили в архитектуре продуктов</a></p><p><a href="#%D0%BF%D0%BB%D0%B0%D0%BD%D1%8B">3. Планы на развитие</a></p><p><a href="#%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4%D1%8B">4. Выводы</a></p><p><a href="#%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE">Полезные ссылки и выступления</a></p></blockquote><a class="anchor" id="про_финуслуги" name="%D0%BF%D1%80%D0%BE_%D1%84%D0%B8%D0%BD%D1%83%D1%81%D0%BB%D1%83%D0%B3%D0%B8"></a><h3>Про Финуслуги.ру и портфель продуктов</h3><p><strong>Финуслуги</strong> — первая платформа личных финансов. Мы создали нашу платформу, чтобы сделать финансовые продукты доступными для любого жителя нашей страны вне зависимости от региона проживания. Одна регистрация на нашей платформе открывает широкие возможности по выбору и оформлению онлайн банковских и страховых продуктов. Без визита в офис, в удобное для вас время. Без каких-либо комиссий.</p><ul><li><p><strong>Вклады</strong> — один из самых простых инструментов, который поможет сохранить и приумножить сбережения. Когда открываешь вклад, важно найти лучшую ставку по депозиту, чтобы получить максимальную доходность. Но отследить изменение процентной ставки по вкладам вручную бывает сложно, потому что условия в разных банках постоянно меняются. Чтобы вы могли на одной странице видеть актуальные ставки по депозитам, мы создали индекс доходности вкладов, в котором сравниваем условия вкладов крупнейших банков. Наши специалисты регулярно мониторят предложения в топ-50 банков и размещают актуальные предложения. Благодаря этому вам не нужно самостоятельно идти в банки или на их сайты в поисках самой высокой ставки по депозитам. На нашей платформе можно сравнить предложения и перейти к открытию вклада. Оформить депозит на Финуслугах можно полностью онлайн без посещения офиса банка. Для этого нужно только авторизоваться через Госуслуги и один раз встретиться с представителем платформы в удобное время.</p></li><li><p><strong>Облигации </strong>— эксклюзивно на нашей платформе мы предлагаем новый простой инструмент с ежедневным начислением дохода. Народные облигации — инвестиции без рыночного риска. Они не торгуются на бирже, а продать их можно в любой момент по цене покупки плюс накопленный доход. При покупке и продаже облигаций вы не платите никаких комиссий.</p></li><li><p><strong>Страхование </strong>— на нашей платформе автолюбители могут оформить электронный полис ОСАГО с выгодой до 78%. Без комиссии, без посещения офиса и без встречи с курьером. Наша платформа рассчитывает цены в более чем 15 страховых компаний и находит самые выгодные предложения для вас. У нас удобный онлайн-калькулятор, который позволит быстро рассчитать стоимость полиса. Оформленный полис мы направляем по email и отображаем в нашем мобильном приложении, чтобы полис всегда был под рукой. Также вы можете подобрать полис КАСКО. А если у вас оформлена ипотека для вас у нас онлайн-оформление страховки.</p></li><li><p><strong>Кредиты</strong> — отправьте одну заявку сразу в несколько банков, выберите самое выгодное предложение и получите кредит. У вас есть возможность получить кредит как без визита в банк, так и в офисе банка. А бесплатный кредитный рейтинг поможет вам понять вероятность одобрения кредита. Чем выше рейтинг, тем больше предложений вы получите.</p></li></ul><a class="anchor" id="до" name="%D0%B4%D0%BE"></a><h4>1. Как было до изменений?</h4><p>До начала трансформации мы жили в компонентном подходе. Использовали, так называемую, модель "водопад", при которой время от старта разработки до вывода в прод занимала в среднем 8 недель. Организационная структура в компонентном подходе предполагала четкие зоны ответственности по направлениям: аналитика, тестирование, архитектура, DevOps, а разработка делилась на фронт и бэк<strong>. </strong>Бизнес в данной модели был практически изолирован. Задача от него ставилась при старте разработки и по истечению 8 недель осуществлялась бизнес-приемка функционала.</p><p>В организационной структуре, приведенной ниже, глава поставок отвечал за скоуп и даты релизов, а также за все quality gates в рамках релиза (приемочное тестирование, регресс, нагрузка и тд). Фактически он был релиз-менеджером на большую программу (всех команд). Он являлся в некотором смысле арбитром между ИТ и бизнесом, что в свою очередь влияло на эффективность поставки и создавало "bus factor". Под главой поставок были все команды, как компонентные, так и сервисные (аналитика, архитекторы, DevOps, тестирование). При этом нужно подчеркнуть, что существовала отдельная линия сопровождения (команда Оps), которая структурно была в другом подразделении. Фактически, были команды разработки, DevOps и 2 линия (Оps) обособленные друг от друга, что создавало в свою очередь фактор "перекидывания через стенку". Каждый отвечал в рамках своей зоны ответственности.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/c59/057/70f/c5905770f4482cd191d7cd79f3db78aa.png" height="1012" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c59/057/70f/c5905770f4482cd191d7cd79f3db78aa.png" width="1933"/><figcaption></figcaption></figure><a class="anchor" id="предпосылки" name="%D0%BF%D1%80%D0%B5%D0%B4%D0%BF%D0%BE%D1%81%D1%8B%D0%BB%D0%BA%D0%B8"></a><h4>1.1 Предпосылки</h4><p>Любые трансформации должны иметь предпосылки. Во всех остальных случаях – это проявление фактора “слепых улучшений”. Все предпосылки были определены в коллаборации разных направлений: бизнеса, разработки, тестирования, конвейера доставки, инфраструктуры, HR, коммуникаций и тд. Это позволило добиться максимально объективной картины текущего состояния.</p><p>Можно выделить следующие основные предпосылки:</p><ul><li><p>мы медленно поставляли функционал до пользователей: пользователи и бизнес требовали быстрой доставки изменений. Ввиду того, что скорость поставки была медленной мы теряли клиентов. А с другой стороны конвейер поставки был устроен настолько сложно, что для доставки изменений подключались много специалистов, которое увеличивало сильно стоимость поставки;</p></li><li><p>страдало качество поставок: этому тоже были четкие объяснения. Не была описана методология управления качеством, отсутствовали явные quality gates в конвейере. Да, формально в нем был статический анализ, но это был всего лишь информационный этап, без явных блокировок;</p></li><li><p>была несогласованность между бизнес и ИТ на всех этапах, и мы часто не оправдывали ожидания друг друга;</p></li><li><p>блокирующие проблемы возникали на поздних этапах, что регулярно приводило к сдвигу релизов;</p></li><li><p>несмотря на достаточное количество ресурсов и высокую экспертность, конвейер не удовлетворял потребностям команд: команды всегда хотели понимать и управлять конвейером самостоятельно, но ввиду того, что он был сложным и непонятным, они по любой проблеме, даже самой незначительной, обращались к "devops-команде";</p></li><li><p>необходимость в ускоренной реакции на потребности рынка или уменьшение TTM: в экосистеме Финуслуги.ру существуют много гипотез и они требовали быстрых проверок. Из-за высокого TTM возникали сложности в их проверках;</p></li><li><p>отсутствовала ответственность за продукт: часто звучали такие фразы как "это все девопсы", "тестировщики не дотестили" и тд. Простой инженер и разработчик продукта не брали на себя ответственности за конечный результат целиком. Причина была, конечно же, не в конкретных ребятах, а в самой инженерной культуре и формулировках миссий продуктов;</p></li><li><p>большое количество коммуникаций;</p></li><li><p>потребность в быстром масштабировании с повышением качества, безопасности и доступности сервисов для клиентов;</p></li><li><p>отсутствовала культура практик проверки гипотез: делали-делали что-то большое, выкатывали в прод, но потом оказывалось, что это уже не нужно рынку;</p></li><li><p>релизы ставились ночью. Это очень сильно выматывало команды и приводило к выгоранию.</p></li></ul><a class="anchor" id="метрики_до" name="%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D0%BA%D0%B8_%D0%B4%D0%BE"></a><h4>1.2 Состояние “до”: метрики</h4><p>Чтобы понять куда идти, надо понять, где мы сейчас. Здесь нам как раз и помогают правильно определенные метрики, исходящие из предпосылок и целей бизнеса. Правильно определенные – это значит метрики, которые помогают находить проблемы, а не только рисует красивые мигающие лампочки. Мы сразу четко обозначили, что метрики не предназначены для того, чтобы хвалить или наказывать людей.</p><p>Некоторые квадранты радара метрик приведены ниже:</p><div><div class="table"><table><tbody><tr><th><p>Технологические метрики и метрики потока:</p></th></tr><tr><td><p align="left"><strong>Time to Market</strong></p></td></tr><tr><td><p align="left">Время от создания (open) до релиза (lead time), дни, истории</p></td></tr><tr><td><p align="left">Частота релизов (release frequency) в месяц, без хотфиксов</p></td></tr><tr><td><p align="left">Время от принятия в работу до релизов (cycle time), дни, программа</p></td></tr><tr><td><p align="left"><strong>Качество</strong></p></td></tr><tr><td><p align="left">Процент внеплановых Hotfix-релизов (Change Failure rate)</p></td></tr><tr><td><p align="left">Кумулятивный поток дефектов</p></td></tr><tr><td><p align="left">Качество заведенных дефектов (% rejected)</p></td></tr><tr><td><p align="left">Среднее время жизни дефекта, дни</p></td></tr><tr><td><p align="left">Дефекты конвейера, к-во</p></td></tr><tr><td><p align="left">Долг по автоматизации тестирования</p></td></tr><tr><td><p align="left">Процент дефектов, найденных до продуктива, от общего числа дефектов</p></td></tr><tr><td><p align="left"><strong>Эффективность</strong></p></td></tr><tr><td><p align="left">Эффективность потока (время кодирования к общему TTM)</p></td></tr><tr><td><p align="left">Rework (время на исправление дефектов ко времени разработки)</p></td></tr><tr><td><p align="left"><strong>Метрики потока</strong></p></td></tr><tr><td><p align="left">ТТМ в управлении продуктом, дни</p></td></tr><tr><td><p align="left">TTM User stories в ИТ, дни</p></td></tr><tr><td><p align="left">Эффективность потока (время написания кода), %</p></td></tr><tr><td><p align="left">Затраты на переделывание</p></td></tr><tr><td><p align="left">Доступность, %</p></td></tr><tr><td><p align="left">Change failure rate, %</p></td></tr><tr><td><p align="left"><strong>Метрики разработки</strong></p></td></tr><tr><td><p align="left">Технический долг (часы)</p></td></tr><tr><td><p align="left">Покрытие unit-тестами (%)</p></td></tr><tr><td><p align="left">Покрытие код-ревью (%)</p></td></tr><tr><td><p align="left"><strong>Метрики Scrum</strong></p></td></tr><tr><td><p align="left">Velocity в story points</p></td></tr><tr><td><p align="left">План / факт, %</p></td></tr><tr><td><p align="left">Scope creep / рост задач во время спринта</p></td></tr></tbody></table></div></div><div><div class="table"><table><tbody><tr><th><p>Клиентские метрики</p></th></tr><tr><td><p align="left">Индекс удовлетворённости клиентов, NPS</p></td></tr><tr><td><p align="left">TTM, от идеи до прода, дни</p></td></tr><tr><td><p align="left">% user stories, по которым высказана и проверена гипотеза (получена обратная связь на ценность)</p></td></tr></tbody></table></div></div><div><div class="table"><table><tbody><tr><th><p>Бизнес-метрики</p></th></tr><tr><td><p align="left">Новые продукты, к-во</p></td></tr><tr><td><p align="left">Новые партнеры, к-во</p></td></tr><tr><td><p align="left">Product-Market Fit</p></td></tr><tr><td><p align="left">Выручка, руб.</p></td></tr><tr><td><p align="left">Продажи фин. продуктов</p></td></tr><tr><td><p align="left">Время открытия и пополнения вклада</p></td></tr><tr><td><p align="left">Доступность, %</p></td></tr></tbody></table></div></div><div><div class="table"><table><tbody><tr><th><p>Организационно-культурные метрики</p></th></tr><tr><td><p align="left">Количество коммуникаций и встреч</p></td></tr><tr><td><p align="left">Качество информации и задач, %</p></td></tr><tr><td><p align="left">Текучка</p></td></tr><tr><td><p align="left">Переключение контекста</p></td></tr><tr><td><p align="left">Открытость к инновациям</p></td></tr><tr><td><p align="left">Лояльность к ошибкам и неудачам</p></td></tr></tbody></table></div></div><p>Мы также "померили" сервисные команды, которые, в некотором смысле, являлись "серой зоной", т.е. сервисные команды не измеряли качество предоставляемого сервиса и удовлетворенность своих клиентов. Это не давало возможности ретроспективно посмотреть на свои процессы и внести туда корректировки и улучшения. </p><p>Нужно подчеркнуть, что мы рассматривали каждый показатель только в определенном контексте, в связке друг с другом, а также с другими метриками, исходя из бизнеса. Более того, мы связывали эффективность работы с обратной связью от конечных пользователей и их удовлетворенностью. Это давало возможность принимать максимально верные управленческие решения по изменениям и ходе трансформации.</p><a class="anchor" id="конвейер_до" name="%D0%BA%D0%BE%D0%BD%D0%B2%D0%B5%D0%B9%D0%B5%D1%80_%D0%B4%D0%BE"></a><h4>1.3 Состояние “до”: конвейер производства и CI/CD-процесс</h4><p>До всех изменений, можно сказать, что конвейер и связанные работы с ним были непрозрачны, а команды вообще не понимали как он устроен. Для них была доступна только минимальная информация — в какой репозиторий залить код и кому написать, если возникнет красная лампочка.</p><p>Структура конвейера была следующей:</p><ul><li><p>CI-процесс был построен на базе Jenkins и плагина <a href="https://plugins.jenkins.io/templating-engine/">Jenkins templating-engine</a>. Под каждый стек были написаны библиотеки для тестов, сборки и тд.</p></li></ul><ul><li><p>Стандартная сборка артефактов в виде докер-контейнера и Helm-чарта с последующей публикацией в хранилище артефактов Nexus.</p></li></ul><p>Прежде чем рассказывать про процесс CD, стоит рассказать про окружения или, как у нас принято называть, "полигоны".</p><p>Полигоны разделяются по функционалу:</p><ol><li><p><strong>Командные полигоны</strong> — полигоны, которые используются только продуктовыми командами. Под каждую команду – отдельный полигон, на котором развёрнуты все необходимые сервисы работы конкретного продукта. Технически, командный полигон представляет из себя отдельный namespace в Kubernetes-кластерах dev-окружения.</p></li><li><p><strong>Полигон для запуска тестов</strong> — отдельный полигон, который используется исключительно для запуска автоматизированных API и UI-тестов. Используется в основном командой QA. Также, как и командные полигоны, располагается в отдельном namespace в Kubernetes-кластерах dev-окружения.</p></li><li><p><strong>Интеграционный полигон</strong> — полигон, который подключен к реальным интеграциям с партнёрами, банками и т.д. На данном полигоне также проводится регрессионное тестирование. Аналогично другим полигонам в отдельном namespace.</p></li><li><p><strong>Полигон для проведения нагрузочного тестирования</strong> — отдельные Kubernetes-кластеры, на которых команда НТ запускает нагрузочное тестирование. Максимально приближен к конфигурации с продом.</p></li><li><p><strong>Хотфикс —</strong> через этот полигон прокатывались хотфиксы на прод.</p></li><li><p><strong>Препрод-полигон</strong> — окружение, на котором проводятся финальные проверки перед публикацией в прод. Также максимально похож на продакшен в части конфигурации.</p></li><li><p><strong>Продакшен Полигон</strong> — прод).</p></li></ol><p>Теперь вернёмся к CD-части нашего рассказа. Доставка также была построена на базе Jenkins, но самое интересное в том, что процесс отличался в зависимости от полигона. И это порождало немало проблем. Пробежимся по каждому из полигонов.</p><ul><li><p>Командные полигоны: деплой на командные полигоны выполнялся в Jenkins в последнем шаге пайплайна. По сути, шаг представлял из себя выполнение команды helm install с определённым набором параметров в виде версии артефакта и т.д. Креды доступа в виде kubeconfig-файлов к кубер кластерам dev-окружения были добавлены в настройки Jenkins.</p></li><li><p>Полигон для запуска тестов: деплой выполнялся по шедулеру несколько раз в день запуском аналогичных команд, что и на командных полигонах.</p></li><li><p>Интеграционный полигон: деплой выполнялся только после прохождения основной джобы API/UI-тестов на QA-полигоне, в которой запускались тесты по всем продуктам. После успешного завершения тестов деплою давался зелёный свет.</p></li><li><p>Препрод-полигон: вот как раз здесь крылось основное различие в процессах по сравнению с описанными выше полигонами. После прохождения регрессионного тестирование на интеграционном полигоне в игру вступала отдельная джоба в Jenkins, в которой запускался специально написанный тулинг (на Go) для снятия так называемой "релизной карты". Релизная карта представляла из себя готовый helmfile.yaml (<a href="https://github.com/helmfile/helmfile">helmfile</a>) с версиями сервисов, которые были продеплоены на интеграционный полигон в момент снятия карты. Далее запускался процесс "переноса релизной карты" — джоба по переносу артефактов из DEV Nexus в TEST Nexus согласно слепку версий сервисов в ранее снятой релизной карте. И финальный этап - джоба деплоя, которая под капотом запускала утилиту helmfile с ранее подготовленным файлом.</p></li><li><p>Продакшен Полигон: процесс аналогичен TEST. Различия в том, что для переноса артефактов осуществлялся из TEST Nexus в Prod Nexus.</p></li></ul><p>За процесс деплоя на TEST/PROD была ответственна отдельная команда сопровождения прод-окружения (ops-ы, devops-ы). Они, в том числе, занимались поддержкой/доработками всевозможного тулинга, описанного выше. Продуктовые команды в процессе деплоя никакого участия не принимали. Сейчас, смотря на это ретроспективно, видно, что это был ориентированный, в первую очередь, на команду Оps инструментарий, а не клиентоориентированный набор платформенных сервисов продуктовым командам.</p><a class="anchor" id="траектория" name="%D1%82%D1%80%D0%B0%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B8%D1%8F"></a><h4>2. Выбор траектории трансформации</h4><a class="anchor" id="топология" name="%D1%82%D0%BE%D0%BF%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F"></a><h4>2.1 Целевая топология и как менялись команды</h4><p>Как было сказано выше, первым делом мы определили метрики и померили их. Основное, что мы поняли — многие проблемы исходили из организационной структуры. Именно с нее начался наш первый шаг к трансформации, где мы сделали акцент на потокоцентричные команды. Команды, главная миссия которых — это создание ценностей для клиентов, посредством сосредоточения вокруг регулирования скорости потока, а также качества, безопасности, доступности и удобстве для пользователей. А их цель — привлечение аудитории, которая согласится купить предлагаемое решение ее проблемы, посредством постоянного совершенствования потока создания ценностей. Формула непростая, но все по порядку.</p><p>Организационная структура была разделена на три вертикали:</p><ul><li><p>уровень программы (CPO, СPM, главный Scrum Master (SM), СTO, главный архитектор, глава интеграционной команды). У каждой роли своя зона ответственности и фокус:</p><ul><li><p>SM — повышение эффективности команды, процессы и их оптимизация;</p></li><li><p>CTO — как обеспечить выполнение бизнес=задач, опираясь на текущие технологии и современные тренды;</p></li><li><p>Глава интеграционной команды — быстрый и надежный конвейер, доставка релизов в прод;</p></li><li><p>Главный архитектор — выбор оптимальных технологий для решения задач бизнеса;</p></li><li><p>CPO/CPM — какой продукт востребован на рынке, что принесет нам прибыль и т. д.</p></li></ul></li><li><p>уровень продукта;</p></li><li><p>уровень команды.</p></li></ul><p>Мы детально проработали новые роли и зоны ответственности, что позже было отражено в виде плейбука. <strong>Плейбук </strong>— это инструмент, который позволяет получить исчерпывающие ответы на вопросы по процессам, ролям и инструментам. В тоже время, это некоторая их стандартизация и спецификация команд.</p><p>Центром вселенной стала продуктовая/потокоцентричная команда, а роль менеджера изменилась — от позиции командования и контроля к лидеру и «слуге». Такие команды мы укомплектовали всеми необходимыми ролями, чтобы они могли независимо работать. Это был кардинально новый подход к работе, который требовал от членов команд также терпения и готовности измениться. В свою очередь, платформа производства или DevOps‑платформа MOEX аккумулировала в себя инструменты, компетенции и платформенные решения, которые предоставлялись командам в виде сервисов. Важной особенностью платформы являлась ее независимость от потокоцентричных команд. Она никак не участвует в производственных процессах самих команд, а только лишь отвечает за свою «платформу как продукт». Конечно, эта прекрасная и идеальная картина случилась не сразу. Команда платформы усердно работала над сбором потребностей команд, их обратной связи и developer experience (опыт разработчика). Именно это позволило нам создать полностью удовлетворяющую потребности разработчиков платформу.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/908/899/eaa/908899eaafecef684a7d0ca7d77bdb88.png" height="1024" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/908/899/eaa/908899eaafecef684a7d0ca7d77bdb88.png" width="1658"/><figcaption></figcaption></figure><a class="anchor" id="сообщества" name="%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%B0"></a><h4>2.2 Как создавали сообщества</h4><p>Продуктовые команды стали более изолированы и появилась потребность сохранять и выращивать экспертизу, делиться опытом между командами. Сначала мы определили, что есть "сообщество". Это объединение людей, имеющих общие интересы для обмена опытом, создания комфортной среды и решения текущих проблем. Концепция ИТ-сообществ в MOEX – это поиск и внедрение практик по развитию производственных процессов и инструментов для ускорения принятия решений и сокращения времени создания ценностей.</p><p>На тему сообществ и их создания существуют много докладов во внешней среде, поэтому мы сделали акцент на то, какие сообщества создавались в рамках Финуслуги.ру, и с какими проблемами мы столкнулись. </p><p>Было принято решение cоздать сообщества по каждому направлению:</p><ul><li><p>архитектуры,</p></li><li><p>тестирования,</p></li><li><p>разработки,</p></li><li><p>DevOps и процессов разработки.</p></li></ul><p>Сложности, с которыми столкнулись:</p><ul><li><p>Не всегда легко найти лидера сообщества. Без лидера/ов сообщества, как правило, не функционируют. Поэтому наша задача была найти мотивированных ребят, готовых лидировать и собирать вокруг идеи других инженеров. Признание стало главной составляющей мотивации лидера сообщества. Их драйвила причастность к созданию крутого сообщества и того, что они стоят у истоков этих событий. На уровне всей компании лидеры стали известными и признанными экспертами. Казалось бы, мелочь, но нам этот фактор очень сильно помог.</p></li><li><p>Конфликт с бизнес-задачами. Эта проблема была ярко выраженной в начале пути. Когда процессы работы сообщества устаканились, задачи сообщества стали для команд обычным делом.</p></li><li><p>Выделять человека только под задачи сообщества слишком дорого.</p></li><li><p>Сопротивления нововведениям. Эта сложность решалась не принуждением или "спусканием сверху". Мы создавали модифицирующие/change-команды, которые помогали другим осознать свои проблемы, создавать прототипы, воспринимать явную пользу от нововведений. Далее эти процессы и технологии масштабировались на другие команды.</p></li></ul><p>Давайте рассмотрим работу сообщества на примере <strong>Finuslugi QA Community</strong>:</p><ul><li><p>встреча проходит раз в 2 недели, открытое мероприятие, любой участник команды может подключиться;</p></li><li><p>повестка встречи определяется заранее с помощью голосования и насущных проблем;</p></li><li><p>отдельное пространство в таск-трекере, куда можно создавать свои пожелания и потребности.</p></li></ul><p>Ответственность лидера сообщества:</p><ul><li><p>анализ ключевых метрик сообщества и проработка мер в случае отклонения;</p></li><li><p>помощь с поиском новых сотрудников (собеседование, онбординг, матрица компетенций и т.д.);</p></li><li><p>проведение обучающих сессий и митапов;</p></li><li><p>формирование стратегии тестирования, работы по её развитию;</p></li><li><p>проведение встреч гильдии QA;</p></li><li><p>создание общих регламентов и стандартов;</p></li><li><p>участие в проведении post-mortem-ов;</p></li><li><p>содействие развитию инструментов тестирования.</p></li></ul><a class="anchor" id="change" name="change"></a><h4>2.3 Создание модифицирующей или change-команды </h4><p>Серьезные инженерные трансформации не заканчиваются лишь внедрением CI/CD и k8s. Основные проблемы изменений кроются в инженерной зрелости команд, которая банально может стать преградой для внедрения модных-молодежных практик. Поэтому наряду с разработкой стандартов, целевых архитектур и конвейеров, мы начали процесс создания модифицирующей команды. Задача такой команды заключалась в максимальной помощи и содействии процессам трансформации и, в первую очередь, командам, которые хотят измениться, но им сложно или они не знают с чего начать, куда идти. Модифицирующую команду мы создали из максимально лояльных, сеньёрных и проактивных ребят, которые четко понимали свою миссию и цели (разумеется, они были представлены всем командам). Она создавалась как временная команда и состояла, как из ребят команды DevOps-платформы, так и Финуслуги. Работа была организована по классическому скраму: планирование, дейли, ретро, ревью и тд. Здесь мы ничего нового не придумывали. Но успех был неизбежен, за счет удаления всех стен между членами команд и создания атмосферы доверительной работы <em>без руководителей, но с сильными лидерами</em> 😊. Никаких ограничений на межкомандные коммуникации, никаких искусственных согласований с "непосредственным руководителем" и, конечно, никаких формальных "работаю только по таскам с детальным описанием и ТЗ". Каждый инженер понимал, что, находясь в модифицирующей команде, ему нужно включать голову и, засучив рукава, разобраться, описать и решить общую задачу, чтобы нанести непоправимую пользу.  </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/8e5/7ad/850/8e57ad850c1f453daa5a7acae0f6bc9b.png" height="950" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8e5/7ad/850/8e57ad850c1f453daa5a7acae0f6bc9b.png" width="1860"/><figcaption></figcaption></figure><p>В успех модифицирующей команды многие не верили. Но мы уж слишком были уверены в своих силах. Во-первых, мы не только занимались проектированием светлого будущего, но и решали задачи, стоящие здесь и сейчас у команд, и, во-вторых, любые изменения и модификации представляли из себя сначала прототип, который в "сыром" виде обсуждался и тестировался с командами. Так мы уменьшали риски дальнейших переделываний, а конечные внедрения имели высокий уровень качества. Кстати, после каждого спринт-ревью модифицирующей команды, мы собирали обратную связь от команд, на горячую. Как правило, это были вопросы на измерение основных метрик: удовлетворённость модифицирующей командой и их решениями, насколько понятны объясняемые кейсы и решения, чего не хватает в рассказе, какие сложности возникают и т.д. Вопросы зависили от конкретного контекста спринта.</p><a class="anchor" id="целевой_конвейер" name="%D1%86%D0%B5%D0%BB%D0%B5%D0%B2%D0%BE%D0%B9_%D0%BA%D0%BE%D0%BD%D0%B2%D0%B5%D0%B9%D0%B5%D1%80"></a><h4>2.4 Целевой конвейер и какую стратегию выбрали </h4><p>Главной целью целевого потока и конвейера являлось создание возможности независимой доставки компонентов продуктов до конечных клиентов. Мы хотели создать такой процесс, где разработчик сможет сам доставить изменения до прода. Да-да, вы не ослышались, именно сам и до прода. И у нас это получилось сделать. Самая основная преграда, существовавшая на пути к этому – была жесткая разделенность между Dev и Ops. Разработчики самостоятельно ничего не могли доставлять в прод без обращения к Ops-ам. Эта позиция аргументировалась всегда тем, что "разработка не должна иметь доступа в прод". Мы, как модифицирующая команда, с этим полностью были согласны. И предложили абсолютно новый концепт конвейера и CI/CD, который был ориентирован на четко определенных Quality Gates (QGs) и Security Gates (SGs), полное прохождение которых давало возможность разработчику и команде довести свои изменения до прода, не обращаясь ни к кому. Здесь важно еще раз подчеркнуть тот фактор, что мы создали процесс, при котором разработка прямого доступа до прода не имеет (доступ до серверов, k8s и тд),но, ввиду полной прозрачности процесса доставки, видимости и наблюдаемости окружений, разработчик фактически получил все необходимые ему инструменты, чтобы "девопсить по фэн-шую" и нести ответственность за свой продукт. У него фактически пропала возможность говорить "виноваты все, кроме меня, локально все работает". Здесь нам также помогла созданная доверительная атмосфера в командах, где за неудачи не ругают, а видят в них зоны роста.</p><p>Чтобы вы лучше поняли наш процесс, для начала нужно разобраться с терминами и что мы под ними понимаем:</p><ul><li><p><strong>QGs и SGs (quality and security gates)</strong> - Проверки и тесты на различных этапах. Такие как SAST, юнит, UI, API, регрессионные, контрактные, ручные, интеграционные, агентские и т.д. Несоответствие значения QGs/SGs эталонному блокирует конвейер до исправления ошибок.</p></li><li><p><strong>PROMOTE ARTIFACTS</strong> - Перенос артефактов из нижестоящего (с разработческого контура в интеграционный. Это разделенные сегменты) NEXUS в вышестоящий. На самом полигоне при этом ничего не меняется и не запускается. Это всего лишь декларирование факта, что артефакт соответствует всем QGs и SGs и тем самым получил визу, чтобы перейти в другой NEXUS.</p></li><li><p><strong>DEPLOY</strong> - Выкатка нового кода на полигон. При использовании feature toggle новый функционал не включен, включение происходит отдельным процессом. То есть deploy только выводит новый код на полигон, но пользователь никаких изменений не замечает.</p></li><li><p><strong>PROMOTE VERSION</strong> - Коммит версии приложения в репозиторий с deploy-map (это репозиторий gitops с состоянием полигона. Более подробное описание см. в п4 "Описание самого CI/CD-процесса"), для PROD открывается MR в защищенную ветку.</p></li><li><p><strong>RELEASE</strong> - Включение нового функционала с помощью feature toggle. Именно в этом случае пользователь видит новую фичу или изменения.</p></li></ul><p>Чтобы наша концепция работала, мы определили, что:</p><ul><li><p>команда должна быть готова выкатывать каждый сервис отдельно и независимо;</p></li><li><p>должно быть реальное покрытие тестами кода на уровне не менее 80%;</p></li><li><p>должна быть возможность запуска API и UI тестов для отдельного сервиса.</p></li></ul><a class="anchor" id="описание_конвейера" name="%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5_%D0%BA%D0%BE%D0%BD%D0%B2%D0%B5%D0%B9%D0%B5%D1%80%D0%B0"></a><h3>Описание самого CI/CD-процесса</h3><a class="anchor" id="a" name="a"></a><h4>a) Почему мигрировали с Jenkins на Gitlab CI в части CD</h4><p>В качестве CI-инструмента в новом конвейере стали использовать GitLabCI. Он был выбран как платформенный инструмент в MOEX. Про опыт выбора инструментов можно говорить долго - мы  напишем отдельно про это статью. Тут хочется лишь описать основные моменты. </p><ul><li><p>Единая точка хранения кода ПО и кода деплоя.</p></li><li><p>Хорошая интеграция с различными системами (Jira, Teams).</p></li><li><p>YAML для описания пайплайнов, не нужно использовать полноценные ЯП.</p></li><li><p>Большая популярность для поиска и онбординга новых сотрудников.</p></li><li><p>Возможность использования шаблонов (широкие возможности по переиспользованию и распространению новых фич).</p></li></ul><a class="anchor" id="b" name="b"></a><h4>b) Про структуру CI</h4><p>Шаблонизация легла в основу всех пайплайнов. В GitLab есть замечательный функционал, который позволяет включить в описание вашего пайплайна внешние YAML-файлы. Выглядит это так:</p><pre><code class="yaml">include:
  - project: platform/templates
    file: ci/templates/java/java-gitlab-ci.yml
variables:
  VAR1: "var1"
  VAR2: "var2"</code></pre><p>Мы сделали единый репозиторий с шаблонами, доступный всем командам. Он состоит из общих шаблонов CI и шаблонов CD. В них содержатся отдельные "кирпичики", из которых строятся пайплайны. Также в репозитории есть директория с командными шаблонами. В ней содержатся шаблоны команд, в которой объединены общие шаблоны +специфика команд.   </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/de1/e0c/d29/de1e0cd29a1a78959d1c068b009c5751.png" height="1169" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/de1/e0c/d29/de1e0cd29a1a78959d1c068b009c5751.png" width="2673"/><figcaption></figcaption></figure><p>Такая концепция позволяет разработчикам почти моментально ставить свои сервисы на общие рельсы. Для этого добавляем в наш gitlab-ci.yml include шаблон и пару переменных – все готово. Также мы можем легко изменять процесс одновременно для всех команд, сделав необходимые правки в командном шаблоне. Последним мы сделали шаблон проверки docker image c помощью инструмента trivy, протестировали, добавили в общий командный шаблон, и теперь все разработчики могут просмотреть уязвимости в своих сборках, при необходимости их устранить.</p><p>В новом процессе особую роль мы отвели понятию QGs. Так как мы предоставили разработчикам возможность доставки своего кода до прода, нам нужно было их подстраховать и дать инструмент контроля качества изменений. QG стоят на разных этапах пайплайна и, если не достигнут целевой уровень, то он блокирует дальнейшее продвижение пайплайна.</p><p>Что в себя включает Quality Gates (QGs) и Security Gates (SGs):</p><ul><li><p>Ручной CodeReview</p></li><li><p>Синтаксический анализ кода (code-style/lint)</p></li><li><p>Статический анализ кода</p></li><li><p>Статическое тестирование безопасности приложения (SAST)</p></li><li><p>Запуск unit-тестов</p></li><li><p>Динамическое тестирование безопасности приложения (DAST, при необходимости)</p></li><li><p>Запуск API, UI, manual, smoke=тестов</p></li><li><p>Запуск интеграционных, нагрузочных, smoke-тестов</p></li><li><p>Проверка артефактов на уязвимости и лицензии.</p></li></ul><p>Для всех Gates с командами разработки были согласованы уровни прохождения. На переходный период были выставлены уровни меньше целевых и смотрели на новый код, чтобы команды успели подтянуть свои сервисы до общего целевого уровня. </p><p>Как мы уже писали, разработчики не могут иметь доступа в прод. Но как же им тогда доставить свои изменения? Мы дали возможность разработчикам, при условии прохождения всех Quality Gates (QGs) и Security Gates (SGs) переместить артефакты, полученные в результате сборки, с нижестоящего полигона на вышестоящий. Таким образом, команда разработки может полностью контролировать, когда и на каком полигоне появятся их изменения. И останется только их задеплоить. Также нам приходилось решать определенные трудности изолированности сред и возможности доступов. По нашей концепции мы можем иметь доступ только с вышестоящих полигонов в нижестоящие. То есть прод → тест можно, наоборот – нет. В выбранном нами в качестве CI инструменте GitLab всю полезною работу выполняют runners. При этом они постоянно отслеживают, есть ли для них задание на GitLab, основываясь на заданном для них теге. Соответственно, в каждом полигоне развернуты runner-ы для выполнения шагов в соответствующем полигоне.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/d88/ae1/deb/d88ae1debc3d482f3c7d643ced6a938e.png" height="1053" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/d88/ae1/deb/d88ae1debc3d482f3c7d643ced6a938e.png" width="1704"/><figcaption></figcaption></figure><a class="anchor" id="c" name="c"></a><h4>c) Про версионирование в целевом подходе</h4><p>При проектировании целевого версионирования были выработаны следующие подходы:</p><ul><li><p>Версионирование должно быть автоматическим в рамках конвейера. Избавиться от ручного инкремента минорных версий.</p></li><li><p>Для версионирования сервисов используется SemVer строго формата X.Y.Z без добавления beta и т.д. Пример: 1.4.0.</p></li><li><p>Источником правды для версий служат git tags как более универсальное решение в отличие от билд-номеров CI-систем.</p></li></ul><p><strong>Major</strong> версия берется для каждого языка из разных мест и полностью контролируется разработчиками:</p><ol><li><p>NodeJS – файл package.json</p></li><li><p>maven – pom.xml</p></li></ol><p>Далее во время сборки осуществляется автоматическая корректировка <strong>minor</strong> и <strong>patch</strong> версии:</p><ul><li><p>Для <strong>trunk</strong> (<strong>develop </strong>branch) изменяется <strong>minor </strong>версия;</p></li><li><p>Для <strong>hotfix </strong>изменяется <strong>patch</strong> версия;</p></li><li><p>Для <strong>feature </strong>веток <strong>не генерируется</strong> версия и <strong>не создаются</strong> артефакты.</p></li></ul><p>Правила изменения версий компонентов:</p><ol><li><p>Для <strong>major </strong>версии нумерация <strong>начинается с 1</strong>, изменяется на <strong>+1</strong> командой разработки, ответственной за компонент, только в случае, когда невозможно поддержать обратную совместимость с предыдущей версией компонента. Происходит по итогам разработки story перед вливанием <strong>feature </strong>branch в <strong>develop </strong>branch (trunk). Через <strong>последний </strong>commit в feature branch.</p></li><li><p>Для <strong>minor </strong>версии нумерация <strong>начинается с 0</strong>, изменяется на <strong>+1 автоматически при каждом push в trunk</strong>. Сбрасывается в 0 в случае изменения major версии.</p></li><li><p>Для <strong>patch </strong>версии нумерация также <strong>начинается с 0</strong>, изменяется на <strong>+1 автоматически при каждом push в hotfix</strong>. Сбрасывается в 0 в случае изменения minor или major версии.</p></li></ol><h4>Техническая реализация</h4><p>Для реализации версионирования, согласно принятым правилам, был выбран инструмент GitVersion.</p><p><strong>GitVersion </strong>позволяет выполнять bump версии без написания дополнительной логики. Необходим только <strong>GitVersion.yml</strong> конфиг с описанием логики:</p><pre><code class="yaml">mode: ContinuousDelivery
no-bump-message: ^\b$
continuous-delivery-fallback-tag: ''
commit-message-incrementing: Disabled
branches:
  trunk:
    regex: ^master$|^main$|^develop$
    tag: ''
    increment: Minor
    track-merge-target: true
    source-branches: []
  hotfix:
    regex: ^hotfix[/-]?
    tag: ''
    increment: Patch
    track-merge-target: true
    source-branches:
    - develop
    - main
    - master
    tracks-release-branches: false
  main:
    regex: ^\b$
  develop:
    regex: ^\b$
  feature:
    regex: ^\b$
  release:
    regex: ^\b$
  pull-request:
    regex: ^\b$
  support:
    regex: ^\b</code></pre><p><strong>Основная логика</strong>:</p><ol><li><p>Считывание Major версии из файлов проекта (в зависимости от каждого языка) и сохранение в переменную окружения <strong>$NEXT_MAJOR</strong></p></li><li><p><strong>Запуск утилиты</strong> для определения новой версии:</p></li></ol><pre><code>/tools/dotnet-gitversion /config /tools/GitVersion.yml /nofetch /nocache /showvariable MajorMinorPatch /overrideconfig next-version=$NEXT_MAJOR</code></pre><ol><li><p>Сохранение результата в build.env, для использования в последующих шагах в пайплайне</p></li><li><p>После успешной сборки создание git tag с соответствующей версией и пушем тэга в транк</p></li></ol><p>Пример Set Version в пайплайне:</p><pre><code class="yaml">Set version:
  image:
    name: &lt;private repo&gt;/cicd/gitversion:${GITVERSION_IMAGE_TAG}
    entrypoint: [""]
  stage: version
  cache: []
  variables:
    GIT_DEPTH: "0"
  before_script:
    - |
      NEXT_MAJOR=$(grep '&lt;version.major&gt;' pom.xml | cut -d'&gt;' -f2 | cut -d'&lt;' -f1)
      echo "INFO - Next major: ${NEXT_MAJOR}"
  script:
    # run gitversion for additional information
    - /tools/dotnet-gitversion /config /tools/GitVersion.yml
    - APP_VERSION=$(/tools/dotnet-gitversion /config /tools/GitVersion.yml /nofetch /nocache /showvariable MajorMinorPatch /overrideconfig next-version=$NEXT_MAJOR)
    - 'echo "INFO - Next version: ${APP_VERSION}"'
    - 'echo "INFO - Check if a git tag with version ${APP_VERSION} does not exist"'
    - |
      if [ $(git tag -l "${APP_VERSION}") ]; then
        echo -e "ERROR - git tag for ${APP_VERSION} already exists in repository.\nRun pipeline with variable PIPELINE_SKIP_BUILD for skipping build new version." &amp;&amp; exit 1
      fi
    - echo "APP_VERSION=${APP_VERSION}" &gt;&gt; build.env
  artifacts:
    reports:
      dotenv: build.env</code></pre><a class="anchor" id="d" name="d"></a><h4>d) CD: почему выбрали ArgoCD </h4><p>В качестве инструмента CD мы используем ArgoCD, который является также платформенным инструментом в MOEX. Основным плюсом ArgoCD для нас является декларативный подход, следования подходу GitOps и красивый UI, который очень нравится разработчикам 😊. Для создания приложений мы выбрали паттерн <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern">app-of-apps</a> - создавать приложения и проекты в ручном режиме у нас запрещено. Под каждое окружение dev/test/prod у нас развёрнуты отдельные инстансы ArgoCD, которые располагаются также в отдельных, так называемых, management-кластерах под каждое окружение (в этих кластерах только инфраструктурный тулинг). Для авторизации в ArgoCD используется интеграция с корпоративным Keycloak+LDAP. Также для каждого окружения созданы отдельные гит-репозитории, в которых декларативно описано состояние приложений и проектов для данного окружения. У себя мы также называем эти репозитории deploy-map.</p><p>Deploy-map, по сути, представляет собой репозиторий, в котором находится Helm-чарт и набор values-файлов. Для удобства поддержки нескольких репозиториев deploy-map под каждое окружение мы написали <a href="https://helm.sh/docs/topics/library_charts/">Library Chart</a>, с помощью которого можно гибко создавать приложения в ArgoCD.</p><p>Структура размещения values-файлов имеет следующий вид:</p><pre><code>.
    └───clusters
    │   └───&lt;название кластера&gt;
    |       ├───&lt;название полигона&gt;.yaml
    └...</code></pre><p>Пример файла описания дев-полигона:</p><pre><code class="yaml">autoSync: false
cluster: dev
environment: dev
namespace: dev
project: dev
selfHeal: false
valueFile: values-dev.yaml
valueFileCommon: values-common-dev.yaml
 
applications:
- name: foo-1
- name: foo-2
- name: foo-3
- name: foo-4
- name: foo-5</code></pre><p>Далее в ArgoCD создается приложение в парадигме app-of-apps, которое смотрит на гит-репозиторий и создаёт новое приложение автоматически. Поскольку deploy-map находится в гите, то добавление приложения сводится к созданию MR, код-ревью и успешному прохождению пайплайна с линтингом. Продуктовые команды активно добавляют приложения на окружения именно таким образом.</p><p>Все это позволило нам деплоить сервисы на наши полигоны одинаково и единообразно, чего раньше не было. </p><p>Общая архитектура конвейера:</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/315/8d5/1f2/3158d51f218adba376c5ee4af5e878af.png" height="5755" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/315/8d5/1f2/3158d51f218adba376c5ee4af5e878af.png" width="8205"/><figcaption></figcaption></figure><a class="anchor" id="архитектура" name="%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D0%B0"></a><h4>2.5 Что изменили в архитектуре продуктов</h4><p>Важной частью инженерных изменений была архитектура продуктов и их связанность. Ввиду того, как было сказано ранее, что наша цель была обеспечить доставку микросервисов обособленно, мы начали активно работать над созданием стандарта к микросервисам и формировать план приведения всей архитектуры к этому стандарту. Все полученные стандарты были заложены в функционал платформы разработки -"Микросервис по кнопке". Это фича в портале разработчика, которая позволяет за несколько кликов получить готовый микросервис по стандарту, подключенный к единому CI/CD, инструментам мониторинга и логирования, внутренним репозиториям и т.д.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/61c/c2b/d9b/61cc2bd9b3d6221a78b8bd36e4b8a4a3.png" height="1034" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/61c/c2b/d9b/61cc2bd9b3d6221a78b8bd36e4b8a4a3.png" width="1832"/><figcaption></figcaption></figure><p>Наряду с этим, был организован переход на trunk-based подход. Ранее у нас были проблемы с ветками- под каждый релиз отводились новые ветки, что-то забывали подливать, теряли изменения... </p><p>Кратко, про сам подход:</p><ul><li><p>у нас одна ветка develop, т.е. все живут в единой стратегии ветвления;</p></li><li><p>разработка ведется по принципу branching by abstraction;</p></li><li><p>подход поддерживает фича-флаги, что дает нам возможность гибко управлять изменениями и отключать функционал, если он не готов или нашлась ошибка в последний момент.</p></li></ul><p>Однако у данного подхода, наряду с плюсами, есть свои особенности:</p><ul><li><p>удаление старых фича-флагов и, в целом, управление ими;</p></li><li><p>quality gates и security gates должны быть на очень высоком уровне;</p></li><li><p>необходимо инвестировать ресурсы в автотестирование, и этот процесс должен быть прозрачен бизнесу;</p></li><li><p>требуется обучение новому подходу разработки branching by abstraction.</p></li></ul><p>Для перехода были организованы технические спринты. Это были итерации, направленные только на технологические задачи, связанные с изменением ветвления и конвейера. В этих спринтах мы сначала наращивали покрытие тестами. После проставляли quality gates (QGs) в нужных местах конвейера, неспеша переходили на новые рельсы и стабилизировали все последующие процессы. </p><a class="anchor" id="планы" name="%D0%BF%D0%BB%D0%B0%D0%BD%D1%8B"></a><h4>3. Планы на развитие</h4><p>Работа над улучшениями – непрерывный процесс, поэтому хочется поделиться нашими некоторыми планами на 2023 г. Наряду с описанной выше трансформацией, мы решили из линии сопровождения сделать полноценную SRE-команду со всеми необходимыми компетенциями. Что уже успели сделать:</p><ul><li><p>команда активно работает над повышение отказоустойчивости и надежности системы,</p></li><li><p>на порядок увеличена наблюдаемость прод-окружения,</p></li><li><p>перешли на спринты,</p></li><li><p>расширен функционал инфраструктурной платформы с фокусом на потребителей, то есть на продуктовые команды. Инфраструктурную платформу начали рассматривать как полноценный продукт.</p></li></ul><p>Что предстоит:</p><ul><li><p>способность системы автоматически восстанавливаться (применение паттернов при построении архитектуры),</p></li><li><p>усовершенствование конвейера доставки новыми проверками,</p></li><li><p>добавление новых фич на платформу разработки для продуктовых команд,</p></li><li><p>развитие сообществ и увеличение количества совместных активностей.</p></li></ul><a class="anchor" id="выводы" name="%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4%D1%8B"></a><h4>4. Выводы</h4><p>Мы хотели показать, что изменения и трансформации охватывают много различных аспектов: как культурного характера, так и команды, технологии и инструменты. Поэтому статья получилось большой, но, надеемся очень интересной. Хочется подытожить рассказ следующими тезисами:</p><ol><li><p>Для трансформации должны быть определены инвестиции. Такие истории невозможно реализовывать только на голом энтузиазме, и в этот процесс должны быть вовлечены все стейкхолдеры.</p></li><li><p>Подходов к трансформации у нас было несколько, но самый последний и масштабный, который затронул все вышеперечисленные аспекты, занял около 6 месяцев. Нужно подчеркнуть, что дальше следовали процессы постоянного усовершенствования, основные задачи трансформации служили толчком для последующих положительных перемен.</p></li><li><p>Переходы на новые практики и процессы осуществлялись постепенно. Модифицирующая команда брала один микросервис одной продуктовой команды, переводила на новые рельсы в виде прототипов, делала демо для самой команды, и,когда пилот был успешным, команда самостоятельно переходила на целевые процессы. Модифицирующая команда всего лишь была рядом и могла сориентировать или подсказать.</p></li><li><p>Если продуктовая команда четко понимает, зачем ей нужны изменения и какие возможны бенефиты, то она сама приложит максимальные усилия для реализации изменений. Но для этого сервисным и модифицирующим командам нужно включить навыки продажников и маркетологов, чтобы продать новую концепцию. Никакие принуждения к изменениям не работают. Да, возможно, инструмент и процесс вы поменяете, но команда не поймет, зачем это нужно было...</p></li><li><p>До трансформации публикации в прод были только в ночное время с плашкой о технических работах. Трансформация позволила реализовать стратегию бесшовной публикации в любое время без простоя и влияния на пользовательский путь.</p></li><li><p>Очень важно не увлекаться сверхулучшениями. Инженерам это нужно хорошо осознавать, в противном случае инженерные процессы превращаются в "полигон для оттачивания навыков" о новомодные инструменты, не нужные бизнесу.</p></li><li><p>Конвейер производства должен быть построен на нативных и простых инструментах. Нужно обращать внимание на порог входа в инструмент и саму структуру пайплайнов. Важно понимать, чем занята инженерная команда, отвечающая за построение инфраструктуры производства и насколько принятые там решения/паттерны соответствуют целям продуктов.</p></li><li><p>Описанная выше трансформация позволила решить все обозначенные проблемы, исходящие из предпосылок. Залог успеха – правильно сформулированные миссии и конечные образы результатов.</p></li><li><p>Процессу трансформации Финуслуги.ру дала сильный импульс общегрупповая стратегия DevOps-трансформации. Многие аспекты инженерной культуры, паттернов и инструментов там уже были описаны и отлично себя зарекомендовали к тому моменту.</p></li><li><p>Идеальный DevOps случается тогда, когда тот, кто разработал продукт, его доставляет и поддерживает. </p></li></ol><p>В конце, хочется поблагодарить всю нашу крутую команду, которая реализовывала процессы трансформации и продолжает совершенствовать продукты. Мы уверены, что люди - это главное, а инвестиции в развитие команд, лидеров и культуры могут изменить мир к лучшему.</p><a class="anchor" id="полезно" name="%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE"></a><p><strong>Полезные ссылки и выступления:</strong></p><ul><li><p><a href="https://youtu.be/D5dw08AchLk">Доклад Карапета Манасяна про стратегию DevOps-трансформации</a>;</p></li><li><p><a href="https://t.me/platendev">Первое сообщество про platform engineering – Platen</a>, который ведет Карапет. Подписка, колокольчик и пальчик вверх приветствуются 😊</p></li></ul><p></p></div></div></div> <!-- --> <!-- --></div> <!-- --> <!-- --></div> <!-- --> <div class="tm-article-presenter__meta"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bdevops%5D">devops</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D1%8F%5D">трансформация</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bplatform%20engineering%5D">platform engineering</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BA%D0%BE%D0%BC%D0%BC%D1%83%D0%BD%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8%5D">коммуникации</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D1%82%D0%BE%D0%BF%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D0%B8%5D">топологии</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BB%D0%B8%D0%B4%D0%B5%D1%80%D1%81%D1%82%D0%B2%D0%BE%5D">лидерство</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%5D">команда</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0%5D">разработка</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bci%2Fcd%5D">ci/cd</a></li><li class="tm-separated-list__item"><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bdevsecops%5D">devsecops</a></li></ul></div> <div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a class="tm-hubs-list__link router-link-active" href="/ru/company/moex/blog/">Блог компании MOEX</a></li><li class="tm-separated-list__item"><a class="tm-hubs-list__link" href="/ru/hub/dev_management/">Управление разработкой</a></li><li class="tm-separated-list__item"><a class="tm-hubs-list__link" href="/ru/hub/agile/">Agile</a></li><li class="tm-separated-list__item"><a class="tm-hubs-list__link" href="/ru/hub/devops/">DevOps</a></li></ul></div></div></article></div> <!-- --></div> <div class="tm-article-sticky-panel"><div class="tm-data-icons tm-article-sticky-panel__icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 2: ↑2 и ↓0</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-rating"></use></svg> <span class="tm-votes-meter__value tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating" title="Всего голосов 2: ↑2 и ↓0">+2</span></div> <div class="v-portal" style="display:none;"></div></div> <!-- --> <!-- --> <button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-favorite"></use></svg></span> <span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">
    12
  </span></button> <div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" href="/ru/company/moex/blog/718504/comments/"><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value">
      0
    </span></a> <!-- --></div> <div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button> <div class="v-portal" style="display:none;"></div></div> <div class="v-portal" style="display:none;"></div></div> </div></div> <div class="v-portal" style="display:none;"></div> <div class="tm-article-presenter__footer"><div class="tm-article-blocks"><!-- --> <div></div> <section class="tm-block tm-block tm-block_spacing-bottom"><!-- --> <div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><div class="tm-article-author"><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/company/moex/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/9ad/544/c50/9ad544c50989fea6d979dc2a6ebc76fb.png" width="40"/></div></a> <div class="tm-company-snippet__info"><a class="tm-company-snippet__title" href="/ru/company/moex/profile/">MOEX</a> <div class="tm-company-snippet__description">Инвестиции начинаются здесь</div></div></div> <div class="tm-article-author__buttons"><!-- --> <!-- --></div></div> <div class="tm-article-author__company-contacts"><a class="tm-article-author__contact" href="http://moex.com/" rel="noopener" target="_blank">
      Сайт
    </a><a class="tm-article-author__contact" href="https://facebook.com/MSKExchange" rel="noopener" target="_blank">
      Facebook
    </a><a class="tm-article-author__contact" href="https://twitter.com/moscow_exchange" rel="noopener" target="_blank">
      Twitter
    </a><a class="tm-article-author__contact" href="https://vk.com/moscow_exchange" rel="noopener" target="_blank">
      ВКонтакте
    </a><a class="tm-article-author__contact" href="https://instagram.com/moscow_exchange" rel="noopener" target="_blank">
      Instagram
    </a></div> <div class="tm-article-author__separator"></div></div> <div class="tm-user-card tm-article-author__user-card tm-user-card tm-user-card_variant-article"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/Manassian/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/3bd/676/bfa/3bd676bfa945ac38f3f9d184feac9f26.jpg"/></div></a> <div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 6 голосов "><div class="tm-counter-container__header"><div class="tm-karma__votes tm-karma__votes_positive">
      4
    </div></div> <div class="tm-counter-container__footer"><div class="tm-karma__text">
      Карма
    </div> <div class="v-portal" style="display:none;"></div></div></div> <div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"> <div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --> <div class="tm-votes-lever__score tm-votes-lever__score tm-votes-lever__score_appearance-rating"><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter tm-votes-lever__score-counter_rating">
        2
      </span></div> <!-- --></div></div> <div class="tm-counter-container__footer"><span class="tm-rating__text tm-rating__text">
      Рейтинг
    </span></div></div></div></div></div> <div class="tm-user-card__info tm-user-card__info tm-user-card__info_variant-article"><div class="tm-user-card__title tm-user-card__title tm-user-card__title_variant-article"><span class="tm-user-card__name tm-user-card__name tm-user-card__name_variant-article">Каро Манасян</span> <a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/Manassian/">
          @Manassian
        </a> <!-- --></div> <p class="tm-user-card__short-info tm-user-card__short-info tm-user-card__short-info_variant-article">Пользователь</p></div></div> <div class="tm-user-card__buttons tm-user-card__buttons tm-user-card__buttons_variant-article"><!-- --> <!-- --> <!-- --> <!-- --> <!-- --></div></div> <!-- --></div> <div class="v-portal" style="display:none;"></div></div> <!-- --></section> <!-- --> <div class="tm-article-blocks__comments"><div class="tm-article-page-comments"><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" href="/ru/company/moex/blog/718504/comments/"><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted">
       Комментировать 
    </span></a> <!-- --></div></div></div> <section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2> </div> <!-- --></header> <div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><div class="tm-tabs tm-tabs"><div><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim">
        Лучшие за сутки
      </button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_slim">
        Похожие
      </button></span></div> <!-- --></div> <div class="similar-and-daily__tab-view"><div><!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <div class="tm-placeholder-article-cards"><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div></div> <!-- --> <!-- --> <!-- --> <!-- --></div> <!-- --></div></div> <!-- --></section> <div><!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div> <div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li></ul></div> <div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --> <!-- --></div> <!-- --> </div></div></div></div></div> <div class="tm-page__sidebar"><!-- --></div></div></div></div></main> <!-- --></div> <!-- --> <div class="tm-footer"><div class="tm-page-width"><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link router-link-active" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div> <div class="tm-footer__social"><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Facebook</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Twitter</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>VK</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-vkontakte"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Telegram</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Youtube</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://zen.yandex.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Яндекс Дзен</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-zen"></use></svg></a></div> <div class="v-portal" style="display:none;"></div> <button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title> <use xlink:href="/img/megazord-v28.2b11c25e..svg#lang"></use></svg>
        Настройка языка
      </button> <a class="tm-footer__link" href="/ru/feedback/">
        Техническая поддержка
      </a> <a class="tm-footer__link" href="/berserk-mode-nope">
        Вернуться на старую версию
      </a> <div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2023, </span> <span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div></div></div> <!-- --> <!-- --></div> <div class="vue-portal-target"></div></div>








</body>
</html>
